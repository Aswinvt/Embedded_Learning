
keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000027c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000034  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000045c  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000181  00000000  00000000  00000780  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000003d2  00000000  00000000  00000901  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  00000cd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000ba  00000000  00000000  00000d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000196  00000000  00000000  00000dde  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000060  00000000  00000000  00000f74  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e7       	ldi	r30, 0x7C	; 124
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 bf 00 	call	0x17e	; 0x17e <main>
  8a:	0c 94 3c 01 	jmp	0x278	; 0x278 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <key>:
		data(a);
	}
}

char key()
{
  92:	5f e7       	ldi	r21, 0x7F	; 127
			case 0X0E:
			return('4');
			break;
		}

		PORTD=0XBF;
  94:	4f eb       	ldi	r20, 0xBF	; 191
			case 0X0E:
			return('8');
			break;
		}

		PORTD=0XDF;
  96:	3f ed       	ldi	r19, 0xDF	; 223
			case 0X0E:
			return('0');
			break;
		}

		PORTD=0XEF;
  98:	2f ee       	ldi	r18, 0xEF	; 239
char key()
{
	int e;
	while(1)
	{
		PORTD=0X7F;
  9a:	52 bb       	out	0x12, r21	; 18
		e=PIND&0X0F;
  9c:	80 b3       	in	r24, 0x10	; 16
		switch(e)
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	8f 70       	andi	r24, 0x0F	; 15
  a2:	90 70       	andi	r25, 0x00	; 0
  a4:	8b 30       	cpi	r24, 0x0B	; 11
  a6:	91 05       	cpc	r25, r1
  a8:	61 f0       	breq	.+24     	; 0xc2 <key+0x30>
  aa:	8c 30       	cpi	r24, 0x0C	; 12
  ac:	91 05       	cpc	r25, r1
  ae:	1c f4       	brge	.+6      	; 0xb6 <key+0x24>
  b0:	07 97       	sbiw	r24, 0x07	; 7
  b2:	79 f4       	brne	.+30     	; 0xd2 <key+0x40>
  b4:	08 c0       	rjmp	.+16     	; 0xc6 <key+0x34>
  b6:	8d 30       	cpi	r24, 0x0D	; 13
  b8:	91 05       	cpc	r25, r1
  ba:	39 f0       	breq	.+14     	; 0xca <key+0x38>
  bc:	0e 97       	sbiw	r24, 0x0e	; 14
  be:	49 f4       	brne	.+18     	; 0xd2 <key+0x40>
  c0:	06 c0       	rjmp	.+12     	; 0xce <key+0x3c>
  c2:	82 e3       	ldi	r24, 0x32	; 50
  c4:	08 95       	ret
  c6:	81 e3       	ldi	r24, 0x31	; 49
  c8:	08 95       	ret
  ca:	83 e3       	ldi	r24, 0x33	; 51
  cc:	08 95       	ret
			case 0X0B:
			return('2');
			break;

			case 0X0D:
			return('3');
  ce:	84 e3       	ldi	r24, 0x34	; 52
  d0:	08 95       	ret
			case 0X0E:
			return('4');
			break;
		}

		PORTD=0XBF;
  d2:	42 bb       	out	0x12, r20	; 18
		e=PIND&0X0F;
  d4:	80 b3       	in	r24, 0x10	; 16
		switch(e)
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	8f 70       	andi	r24, 0x0F	; 15
  da:	90 70       	andi	r25, 0x00	; 0
  dc:	8b 30       	cpi	r24, 0x0B	; 11
  de:	91 05       	cpc	r25, r1
  e0:	61 f0       	breq	.+24     	; 0xfa <key+0x68>
  e2:	8c 30       	cpi	r24, 0x0C	; 12
  e4:	91 05       	cpc	r25, r1
  e6:	1c f4       	brge	.+6      	; 0xee <key+0x5c>
  e8:	07 97       	sbiw	r24, 0x07	; 7
  ea:	79 f4       	brne	.+30     	; 0x10a <key+0x78>
  ec:	08 c0       	rjmp	.+16     	; 0xfe <key+0x6c>
  ee:	8d 30       	cpi	r24, 0x0D	; 13
  f0:	91 05       	cpc	r25, r1
  f2:	39 f0       	breq	.+14     	; 0x102 <key+0x70>
  f4:	0e 97       	sbiw	r24, 0x0e	; 14
  f6:	49 f4       	brne	.+18     	; 0x10a <key+0x78>
  f8:	06 c0       	rjmp	.+12     	; 0x106 <key+0x74>
  fa:	86 e3       	ldi	r24, 0x36	; 54
  fc:	08 95       	ret
  fe:	85 e3       	ldi	r24, 0x35	; 53
 100:	08 95       	ret
 102:	87 e3       	ldi	r24, 0x37	; 55
 104:	08 95       	ret
			case 0X0B:
			return('6');
			break;

			case 0X0D:
			return('7');
 106:	88 e3       	ldi	r24, 0x38	; 56
 108:	08 95       	ret
			case 0X0E:
			return('8');
			break;
		}

		PORTD=0XDF;
 10a:	32 bb       	out	0x12, r19	; 18
		e=PIND&0X0F;
 10c:	80 b3       	in	r24, 0x10	; 16
		switch(e)
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	8f 70       	andi	r24, 0x0F	; 15
 112:	90 70       	andi	r25, 0x00	; 0
 114:	8b 30       	cpi	r24, 0x0B	; 11
 116:	91 05       	cpc	r25, r1
 118:	61 f0       	breq	.+24     	; 0x132 <key+0xa0>
 11a:	8c 30       	cpi	r24, 0x0C	; 12
 11c:	91 05       	cpc	r25, r1
 11e:	1c f4       	brge	.+6      	; 0x126 <key+0x94>
 120:	07 97       	sbiw	r24, 0x07	; 7
 122:	79 f4       	brne	.+30     	; 0x142 <key+0xb0>
 124:	08 c0       	rjmp	.+16     	; 0x136 <key+0xa4>
 126:	8d 30       	cpi	r24, 0x0D	; 13
 128:	91 05       	cpc	r25, r1
 12a:	39 f0       	breq	.+14     	; 0x13a <key+0xa8>
 12c:	0e 97       	sbiw	r24, 0x0e	; 14
 12e:	49 f4       	brne	.+18     	; 0x142 <key+0xb0>
 130:	06 c0       	rjmp	.+12     	; 0x13e <key+0xac>
 132:	8a e2       	ldi	r24, 0x2A	; 42
 134:	08 95       	ret
 136:	89 e3       	ldi	r24, 0x39	; 57
 138:	08 95       	ret
 13a:	83 e2       	ldi	r24, 0x23	; 35
 13c:	08 95       	ret
			case 0X0B:
			return('*');
			break;

			case 0X0D:
			return('#');
 13e:	80 e3       	ldi	r24, 0x30	; 48
 140:	08 95       	ret
			case 0X0E:
			return('0');
			break;
		}

		PORTD=0XEF;
 142:	22 bb       	out	0x12, r18	; 18
		e=PIND&0X0F;
 144:	80 b3       	in	r24, 0x10	; 16
		switch(e)
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	8f 70       	andi	r24, 0x0F	; 15
 14a:	90 70       	andi	r25, 0x00	; 0
 14c:	8b 30       	cpi	r24, 0x0B	; 11
 14e:	91 05       	cpc	r25, r1
 150:	71 f0       	breq	.+28     	; 0x16e <key+0xdc>
 152:	8c 30       	cpi	r24, 0x0C	; 12
 154:	91 05       	cpc	r25, r1
 156:	24 f4       	brge	.+8      	; 0x160 <key+0xce>
 158:	07 97       	sbiw	r24, 0x07	; 7
 15a:	09 f0       	breq	.+2      	; 0x15e <key+0xcc>
 15c:	9e cf       	rjmp	.-196    	; 0x9a <key+0x8>
 15e:	09 c0       	rjmp	.+18     	; 0x172 <key+0xe0>
 160:	8d 30       	cpi	r24, 0x0D	; 13
 162:	91 05       	cpc	r25, r1
 164:	41 f0       	breq	.+16     	; 0x176 <key+0xe4>
 166:	0e 97       	sbiw	r24, 0x0e	; 14
 168:	09 f0       	breq	.+2      	; 0x16c <key+0xda>
 16a:	97 cf       	rjmp	.-210    	; 0x9a <key+0x8>
 16c:	06 c0       	rjmp	.+12     	; 0x17a <key+0xe8>
 16e:	81 e4       	ldi	r24, 0x41	; 65
 170:	08 95       	ret
 172:	88 e4       	ldi	r24, 0x48	; 72
 174:	08 95       	ret
 176:	82 e5       	ldi	r24, 0x52	; 82
 178:	08 95       	ret
			case 0X0B:
			return('A');
			break;

			case 0X0D:
			return('R');
 17a:	8f e4       	ldi	r24, 0x4F	; 79
			case 0X0E:
			return('O');
			break;
		}
	}
}
 17c:	08 95       	ret

0000017e <main>:
#include<util/delay.h>
char key();
void cmd(int);
void data(char);
void main()
{
 17e:	0f 93       	push	r16
 180:	1f 93       	push	r17
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
	
	char a;
	DDRD=0XF0;
 186:	80 ef       	ldi	r24, 0xF0	; 240
 188:	81 bb       	out	0x11, r24	; 17
	DDRC=0XFF;
 18a:	8f ef       	ldi	r24, 0xFF	; 255
 18c:	84 bb       	out	0x14, r24	; 20
	DDRB=0XFF;
 18e:	87 bb       	out	0x17, r24	; 23
		}
	}
}
void cmd(int a)
{
	PORTB=a;
 190:	88 e3       	ldi	r24, 0x38	; 56
 192:	88 bb       	out	0x18, r24	; 24
	PORTC=0X02;
 194:	82 e0       	ldi	r24, 0x02	; 2
 196:	85 bb       	out	0x15, r24	; 21
 198:	80 e2       	ldi	r24, 0x20	; 32
 19a:	9e e4       	ldi	r25, 0x4E	; 78
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 19c:	29 e1       	ldi	r18, 0x19	; 25
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	f9 01       	movw	r30, r18
 1a2:	31 97       	sbiw	r30, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <main+0x24>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1a8:	d9 f7       	brne	.-10     	; 0x1a0 <main+0x22>
	_delay_ms(2000);
	PORTC=0X00;
 1aa:	15 ba       	out	0x15, r1	; 21
		}
	}
}
void cmd(int a)
{
	PORTB=a;
 1ac:	80 e8       	ldi	r24, 0x80	; 128
 1ae:	88 bb       	out	0x18, r24	; 24
	PORTC=0X02;
 1b0:	82 e0       	ldi	r24, 0x02	; 2
 1b2:	85 bb       	out	0x15, r24	; 21
 1b4:	80 e2       	ldi	r24, 0x20	; 32
 1b6:	9e e4       	ldi	r25, 0x4E	; 78
 1b8:	29 e1       	ldi	r18, 0x19	; 25
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	f9 01       	movw	r30, r18
 1be:	31 97       	sbiw	r30, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <main+0x40>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1c2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1c4:	d9 f7       	brne	.-10     	; 0x1bc <main+0x3e>
	_delay_ms(2000);
	PORTC=0X00;
 1c6:	15 ba       	out	0x15, r1	; 21
		}
	}
}
void cmd(int a)
{
	PORTB=a;
 1c8:	8e e0       	ldi	r24, 0x0E	; 14
 1ca:	88 bb       	out	0x18, r24	; 24
	PORTC=0X02;
 1cc:	82 e0       	ldi	r24, 0x02	; 2
 1ce:	85 bb       	out	0x15, r24	; 21
 1d0:	80 e2       	ldi	r24, 0x20	; 32
 1d2:	9e e4       	ldi	r25, 0x4E	; 78
 1d4:	29 e1       	ldi	r18, 0x19	; 25
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	f9 01       	movw	r30, r18
 1da:	31 97       	sbiw	r30, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <main+0x5c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1de:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1e0:	d9 f7       	brne	.-10     	; 0x1d8 <main+0x5a>
	_delay_ms(2000);
	PORTC=0X00;
 1e2:	15 ba       	out	0x15, r1	; 21
		}
	}
}
void cmd(int a)
{
	PORTB=a;
 1e4:	86 e0       	ldi	r24, 0x06	; 6
 1e6:	88 bb       	out	0x18, r24	; 24
	PORTC=0X02;
 1e8:	82 e0       	ldi	r24, 0x02	; 2
 1ea:	85 bb       	out	0x15, r24	; 21
 1ec:	80 e2       	ldi	r24, 0x20	; 32
 1ee:	9e e4       	ldi	r25, 0x4E	; 78
 1f0:	29 e1       	ldi	r18, 0x19	; 25
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	f9 01       	movw	r30, r18
 1f6:	31 97       	sbiw	r30, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <main+0x78>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1fa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1fc:	d9 f7       	brne	.-10     	; 0x1f4 <main+0x76>
	_delay_ms(2000);
	PORTC=0X00;
 1fe:	15 ba       	out	0x15, r1	; 21
		}
	}
}
void cmd(int a)
{
	PORTB=a;
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	88 bb       	out	0x18, r24	; 24
	PORTC=0X02;
 204:	82 e0       	ldi	r24, 0x02	; 2
 206:	85 bb       	out	0x15, r24	; 21
 208:	80 e2       	ldi	r24, 0x20	; 32
 20a:	9e e4       	ldi	r25, 0x4E	; 78
 20c:	29 e1       	ldi	r18, 0x19	; 25
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	f9 01       	movw	r30, r18
 212:	31 97       	sbiw	r30, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <main+0x94>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 216:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 218:	d9 f7       	brne	.-10     	; 0x210 <main+0x92>
	_delay_ms(2000);
	PORTC=0X00;
 21a:	15 ba       	out	0x15, r1	; 21
}

void data(char b)
{
	PORTB=b;
	PORTC=0X03;
 21c:	03 e0       	ldi	r16, 0x03	; 3
 21e:	c9 e1       	ldi	r28, 0x19	; 25
 220:	d0 e0       	ldi	r29, 0x00	; 0
	_delay_ms(2000);
	PORTC=0X01;
 222:	11 e0       	ldi	r17, 0x01	; 1
	cmd(0X0E);
	cmd(0X06);
	cmd(0X01);
	while(1)
	{
		a=key();
 224:	0e 94 49 00 	call	0x92	; 0x92 <key>
	PORTC=0X00;
}

void data(char b)
{
	PORTB=b;
 228:	88 bb       	out	0x18, r24	; 24
	PORTC=0X03;
 22a:	05 bb       	out	0x15, r16	; 21
 22c:	80 e2       	ldi	r24, 0x20	; 32
 22e:	9e e4       	ldi	r25, 0x4E	; 78
 230:	fe 01       	movw	r30, r28
 232:	31 97       	sbiw	r30, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <main+0xb4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 236:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 238:	d9 f7       	brne	.-10     	; 0x230 <main+0xb2>
	_delay_ms(2000);
	PORTC=0X01;
 23a:	15 bb       	out	0x15, r17	; 21
 23c:	f3 cf       	rjmp	.-26     	; 0x224 <main+0xa6>

0000023e <cmd>:
			break;
		}
	}
}
void cmd(int a)
{
 23e:	88 bb       	out	0x18, r24	; 24
	PORTB=a;
	PORTC=0X02;
 240:	82 e0       	ldi	r24, 0x02	; 2
 242:	85 bb       	out	0x15, r24	; 21
 244:	80 e2       	ldi	r24, 0x20	; 32
 246:	9e e4       	ldi	r25, 0x4E	; 78
 248:	29 e1       	ldi	r18, 0x19	; 25
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	f9 01       	movw	r30, r18
 24e:	31 97       	sbiw	r30, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <cmd+0x10>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 252:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 254:	d9 f7       	brne	.-10     	; 0x24c <cmd+0xe>
	_delay_ms(2000);
	PORTC=0X00;
 256:	15 ba       	out	0x15, r1	; 21
}
 258:	08 95       	ret

0000025a <data>:

void data(char b)
{
 25a:	88 bb       	out	0x18, r24	; 24
	PORTB=b;
	PORTC=0X03;
 25c:	83 e0       	ldi	r24, 0x03	; 3
 25e:	85 bb       	out	0x15, r24	; 21
 260:	80 e2       	ldi	r24, 0x20	; 32
 262:	9e e4       	ldi	r25, 0x4E	; 78
 264:	29 e1       	ldi	r18, 0x19	; 25
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	f9 01       	movw	r30, r18
 26a:	31 97       	sbiw	r30, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <data+0x10>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 26e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 270:	d9 f7       	brne	.-10     	; 0x268 <data+0xe>
	_delay_ms(2000);
	PORTC=0X01;
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	85 bb       	out	0x15, r24	; 21
}
 276:	08 95       	ret

00000278 <_exit>:
 278:	f8 94       	cli

0000027a <__stop_program>:
 27a:	ff cf       	rjmp	.-2      	; 0x27a <__stop_program>
