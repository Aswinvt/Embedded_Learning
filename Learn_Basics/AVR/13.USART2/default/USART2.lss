
USART2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  0000011a  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000025  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001e6  00000000  00000000  000001d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000143  00000000  00000000  000003bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001b2  00000000  00000000  00000502  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  000006b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000ba  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000002b  00000000  00000000  0000079e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000007c9  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e1       	ldi	r30, 0x1A	; 26
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 8b 00 	jmp	0x116	; 0x116 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <main>:
#include<avr/io.h>
#include<util/delay.h>
void trans(char);
void main()
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	00 d0       	rcall	.+0      	; 0x98 <main+0x6>
  98:	00 d0       	rcall	.+0      	; 0x9a <main+0x8>
  9a:	0f 92       	push	r0
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
	int i;
	char a[]="SMEC";
  a0:	de 01       	movw	r26, r28
  a2:	11 96       	adiw	r26, 0x01	; 1
  a4:	e0 e6       	ldi	r30, 0x60	; 96
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	01 90       	ld	r0, Z+
  ac:	0d 92       	st	X+, r0
  ae:	81 50       	subi	r24, 0x01	; 1
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x18>
	DDRD=0X02;
  b2:	82 e0       	ldi	r24, 0x02	; 2
  b4:	81 bb       	out	0x11, r24	; 17
	UCSRA=0X00;
  b6:	1b b8       	out	0x0b, r1	; 11
	UCSRB=0X18;
  b8:	88 e1       	ldi	r24, 0x18	; 24
  ba:	8a b9       	out	0x0a, r24	; 10
	UCSRC=0X06;
  bc:	86 e0       	ldi	r24, 0x06	; 6
  be:	80 bd       	out	0x20, r24	; 32
	UBRRL=0X33;
  c0:	83 e3       	ldi	r24, 0x33	; 51
  c2:	89 b9       	out	0x09, r24	; 9
	UBRRH=0X00;
  c4:	10 bc       	out	0x20, r1	; 32
  c6:	de 01       	movw	r26, r28
  c8:	11 96       	adiw	r26, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ca:	29 e1       	ldi	r18, 0x19	; 25
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	0b c0       	rjmp	.+22     	; 0xe6 <main+0x54>
	
}

void trans(char b)
{
	UDR=b;
  d0:	8c b9       	out	0x0c, r24	; 12
	while((UCSRA&0X40)==0);
  d2:	5e 9b       	sbis	0x0b, 6	; 11
  d4:	fe cf       	rjmp	.-4      	; 0xd2 <main+0x40>
  d6:	88 e8       	ldi	r24, 0x88	; 136
  d8:	93 e1       	ldi	r25, 0x13	; 19
  da:	f9 01       	movw	r30, r18
  dc:	31 97       	sbiw	r30, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <main+0x4a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e2:	d9 f7       	brne	.-10     	; 0xda <main+0x48>
  e4:	11 96       	adiw	r26, 0x01	; 1
	UCSRA=0X00;
	UCSRB=0X18;
	UCSRC=0X06;
	UBRRL=0X33;
	UBRRH=0X00;
	for(i=0;a[i]!='\0';i++)
  e6:	8c 91       	ld	r24, X
  e8:	88 23       	and	r24, r24
  ea:	91 f7       	brne	.-28     	; 0xd0 <main+0x3e>
	{
		trans(a[i]);
	}
	
}
  ec:	0f 90       	pop	r0
  ee:	0f 90       	pop	r0
  f0:	0f 90       	pop	r0
  f2:	0f 90       	pop	r0
  f4:	0f 90       	pop	r0
  f6:	cf 91       	pop	r28
  f8:	df 91       	pop	r29
  fa:	08 95       	ret

000000fc <trans>:

void trans(char b)
{
  fc:	8c b9       	out	0x0c, r24	; 12
	UDR=b;
	while((UCSRA&0X40)==0);
  fe:	5e 9b       	sbis	0x0b, 6	; 11
 100:	fe cf       	rjmp	.-4      	; 0xfe <trans+0x2>
 102:	88 e8       	ldi	r24, 0x88	; 136
 104:	93 e1       	ldi	r25, 0x13	; 19
 106:	29 e1       	ldi	r18, 0x19	; 25
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	f9 01       	movw	r30, r18
 10c:	31 97       	sbiw	r30, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <trans+0x10>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 110:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 112:	d9 f7       	brne	.-10     	; 0x10a <trans+0xe>
	_delay_ms(500);
}
 114:	08 95       	ret

00000116 <_exit>:
 116:	f8 94       	cli

00000118 <__stop_program>:
 118:	ff cf       	rjmp	.-2      	; 0x118 <__stop_program>
