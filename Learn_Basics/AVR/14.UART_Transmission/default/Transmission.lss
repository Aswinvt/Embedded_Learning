
Transmission.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000019e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000002d  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000221  00000000  00000000  000001eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000170  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000256  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  000007d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000c6  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000002b  00000000  00000000  000008da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000905  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e4       	ldi	r30, 0x4A	; 74
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 a3 00 	jmp	0x146	; 0x146 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <main>:
#include<avr\io.h>
#include<util\delay.h>
void trans(char);
char rec();
void main()
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	2a 97       	sbiw	r28, 0x0a	; 10
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	char a[10];
	int i;
	DDRB=0XFF;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	87 bb       	out	0x17, r24	; 23
	DDRC=0XFF;
  aa:	84 bb       	out	0x14, r24	; 20
	DDRD=0X02;
  ac:	82 e0       	ldi	r24, 0x02	; 2
  ae:	81 bb       	out	0x11, r24	; 17
	UCSRA=0X00;
  b0:	1b b8       	out	0x0b, r1	; 11
	UCSRB=0X18;
  b2:	88 e1       	ldi	r24, 0x18	; 24
  b4:	8a b9       	out	0x0a, r24	; 10
	UCSRC=0X06;
  b6:	86 e0       	ldi	r24, 0x06	; 6
  b8:	80 bd       	out	0x20, r24	; 32
	UBRRL=0X33;
  ba:	83 e3       	ldi	r24, 0x33	; 51
  bc:	89 b9       	out	0x09, r24	; 9
	UBRRH=0X00;
  be:	10 bc       	out	0x20, r1	; 32
		trans(a[i]);
	}	
}
char rec()
{
	while((UCSRA&0X80)==0);
  c0:	5f 9b       	sbis	0x0b, 7	; 11
  c2:	fe cf       	rjmp	.-4      	; 0xc0 <main+0x2e>
	return(UDR);
  c4:	8c b1       	in	r24, 0x0c	; 12
	UCSRA=0X00;
	UCSRB=0X18;
	UCSRC=0X06;
	UBRRL=0X33;
	UBRRH=0X00;
	while(rec()!='*');
  c6:	8a 32       	cpi	r24, 0x2A	; 42
  c8:	d9 f7       	brne	.-10     	; 0xc0 <main+0x2e>
  ca:	fe 01       	movw	r30, r28
  cc:	af ef       	ldi	r26, 0xFF	; 255
  ce:	bf ef       	ldi	r27, 0xFF	; 255
  d0:	06 c0       	rjmp	.+12     	; 0xde <main+0x4c>
		trans(a[i]);
	}	
}
char rec()
{
	while((UCSRA&0X80)==0);
  d2:	5f 9b       	sbis	0x0b, 7	; 11
  d4:	fe cf       	rjmp	.-4      	; 0xd2 <main+0x40>
	return(UDR);
  d6:	8c b1       	in	r24, 0x0c	; 12
	UBRRL=0X33;
	UBRRH=0X00;
	while(rec()!='*');
	for(i=0;a[i-1]!='#';i++)
	{
		a[i]=rec();
  d8:	81 83       	std	Z+1, r24	; 0x01
  da:	11 96       	adiw	r26, 0x01	; 1
  dc:	31 96       	adiw	r30, 0x01	; 1
	UCSRB=0X18;
	UCSRC=0X06;
	UBRRL=0X33;
	UBRRH=0X00;
	while(rec()!='*');
	for(i=0;a[i-1]!='#';i++)
  de:	80 81       	ld	r24, Z
  e0:	83 32       	cpi	r24, 0x23	; 35
  e2:	b9 f7       	brne	.-18     	; 0xd2 <main+0x40>
	{
		a[i]=rec();
	}
	a[i-1]='\0';
  e4:	ce 01       	movw	r24, r28
  e6:	01 96       	adiw	r24, 0x01	; 1
  e8:	a8 0f       	add	r26, r24
  ea:	b9 1f       	adc	r27, r25
  ec:	1c 92       	st	X, r1
  ee:	dc 01       	movw	r26, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  f0:	29 e1       	ldi	r18, 0x19	; 25
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	0b c0       	rjmp	.+22     	; 0x10c <main+0x7a>
	while((UCSRA&0X80)==0);
	return(UDR);
}
void trans(char b)
{
	UDR=b;
  f6:	8c b9       	out	0x0c, r24	; 12
	while((UCSRA&0X40)==0);
  f8:	5e 9b       	sbis	0x0b, 6	; 11
  fa:	fe cf       	rjmp	.-4      	; 0xf8 <main+0x66>
  fc:	88 e8       	ldi	r24, 0x88	; 136
  fe:	93 e1       	ldi	r25, 0x13	; 19
 100:	f9 01       	movw	r30, r18
 102:	31 97       	sbiw	r30, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <main+0x70>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 106:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 108:	d9 f7       	brne	.-10     	; 0x100 <main+0x6e>
 10a:	11 96       	adiw	r26, 0x01	; 1
	for(i=0;a[i-1]!='#';i++)
	{
		a[i]=rec();
	}
	a[i-1]='\0';
	for(i=0;a[i]!='\0';i++)
 10c:	8c 91       	ld	r24, X
 10e:	88 23       	and	r24, r24
 110:	91 f7       	brne	.-28     	; 0xf6 <main+0x64>
	{
		trans(a[i]);
	}	
}
 112:	2a 96       	adiw	r28, 0x0a	; 10
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	f8 94       	cli
 118:	de bf       	out	0x3e, r29	; 62
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	cd bf       	out	0x3d, r28	; 61
 11e:	cf 91       	pop	r28
 120:	df 91       	pop	r29
 122:	08 95       	ret

00000124 <rec>:
char rec()
{
 124:	5f 9b       	sbis	0x0b, 7	; 11
 126:	fe cf       	rjmp	.-4      	; 0x124 <rec>
	while((UCSRA&0X80)==0);
	return(UDR);
 128:	8c b1       	in	r24, 0x0c	; 12
}
 12a:	08 95       	ret

0000012c <trans>:
void trans(char b)
{
 12c:	8c b9       	out	0x0c, r24	; 12
	UDR=b;
	while((UCSRA&0X40)==0);
 12e:	5e 9b       	sbis	0x0b, 6	; 11
 130:	fe cf       	rjmp	.-4      	; 0x12e <trans+0x2>
 132:	88 e8       	ldi	r24, 0x88	; 136
 134:	93 e1       	ldi	r25, 0x13	; 19
 136:	29 e1       	ldi	r18, 0x19	; 25
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	f9 01       	movw	r30, r18
 13c:	31 97       	sbiw	r30, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <trans+0x10>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 140:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 142:	d9 f7       	brne	.-10     	; 0x13a <trans+0xe>
	_delay_ms(500);
}
 144:	08 95       	ret

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>
