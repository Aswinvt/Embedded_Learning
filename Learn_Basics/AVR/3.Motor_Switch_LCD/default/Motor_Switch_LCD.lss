
Motor_Switch_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000001d8  0000024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000038  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000055d  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000017c  00000000  00000000  00000809  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003f9  00000000  00000000  00000985  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000050  00000000  00000000  00000d80  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000d9  00000000  00000000  00000dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000203  00000000  00000000  00000ea9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000d8  00000000  00000000  000010ac  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ed       	ldi	r30, 0xD8	; 216
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <main>:
#include<util/delay.h>
void cmd(int);
void data(char);
void display(const char *);
void main()
{
  92:	1f 93       	push	r17
	int i;
	DDRD=0XFF;
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	81 bb       	out	0x11, r24	; 17
	DDRB=0XFF;
  98:	87 bb       	out	0x17, r24	; 23
	DDRC=0XFF;
  9a:	84 bb       	out	0x14, r24	; 20
	}
}

void cmd(int a)
{
	PORTB=a;
  9c:	88 e3       	ldi	r24, 0x38	; 56
  9e:	88 bb       	out	0x18, r24	; 24
	PORTD=0X40;
  a0:	80 e4       	ldi	r24, 0x40	; 64
  a2:	82 bb       	out	0x12, r24	; 18
  a4:	88 e8       	ldi	r24, 0x88	; 136
  a6:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a8:	29 e1       	ldi	r18, 0x19	; 25
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	f9 01       	movw	r30, r18
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <main+0x1c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  b2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  b4:	d9 f7       	brne	.-10     	; 0xac <main+0x1a>
	_delay_ms(500);
	PORTD=0X00;
  b6:	12 ba       	out	0x12, r1	; 18
	}
}

void cmd(int a)
{
	PORTB=a;
  b8:	80 e8       	ldi	r24, 0x80	; 128
  ba:	88 bb       	out	0x18, r24	; 24
	PORTD=0X40;
  bc:	80 e4       	ldi	r24, 0x40	; 64
  be:	82 bb       	out	0x12, r24	; 18
  c0:	88 e8       	ldi	r24, 0x88	; 136
  c2:	93 e1       	ldi	r25, 0x13	; 19
  c4:	29 e1       	ldi	r18, 0x19	; 25
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	f9 01       	movw	r30, r18
  ca:	31 97       	sbiw	r30, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <main+0x38>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ce:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d0:	d9 f7       	brne	.-10     	; 0xc8 <main+0x36>
	_delay_ms(500);
	PORTD=0X00;
  d2:	12 ba       	out	0x12, r1	; 18
	}
}

void cmd(int a)
{
	PORTB=a;
  d4:	8e e0       	ldi	r24, 0x0E	; 14
  d6:	88 bb       	out	0x18, r24	; 24
	PORTD=0X40;
  d8:	80 e4       	ldi	r24, 0x40	; 64
  da:	82 bb       	out	0x12, r24	; 18
  dc:	88 e8       	ldi	r24, 0x88	; 136
  de:	93 e1       	ldi	r25, 0x13	; 19
  e0:	29 e1       	ldi	r18, 0x19	; 25
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	f9 01       	movw	r30, r18
  e6:	31 97       	sbiw	r30, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <main+0x54>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ec:	d9 f7       	brne	.-10     	; 0xe4 <main+0x52>
	_delay_ms(500);
	PORTD=0X00;
  ee:	12 ba       	out	0x12, r1	; 18
	}
}

void cmd(int a)
{
	PORTB=a;
  f0:	86 e0       	ldi	r24, 0x06	; 6
  f2:	88 bb       	out	0x18, r24	; 24
	PORTD=0X40;
  f4:	80 e4       	ldi	r24, 0x40	; 64
  f6:	82 bb       	out	0x12, r24	; 18
  f8:	88 e8       	ldi	r24, 0x88	; 136
  fa:	93 e1       	ldi	r25, 0x13	; 19
  fc:	29 e1       	ldi	r18, 0x19	; 25
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	f9 01       	movw	r30, r18
 102:	31 97       	sbiw	r30, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <main+0x70>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 106:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 108:	d9 f7       	brne	.-10     	; 0x100 <main+0x6e>
	_delay_ms(500);
	PORTD=0X00;
 10a:	12 ba       	out	0x12, r1	; 18
	}
}

void cmd(int a)
{
	PORTB=a;
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	88 bb       	out	0x18, r24	; 24
	PORTD=0X40;
 110:	80 e4       	ldi	r24, 0x40	; 64
 112:	82 bb       	out	0x12, r24	; 18
 114:	88 e8       	ldi	r24, 0x88	; 136
 116:	93 e1       	ldi	r25, 0x13	; 19
 118:	29 e1       	ldi	r18, 0x19	; 25
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	f9 01       	movw	r30, r18
 11e:	31 97       	sbiw	r30, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <main+0x8c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 122:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 124:	d9 f7       	brne	.-10     	; 0x11c <main+0x8a>
	_delay_ms(500);
	PORTD=0X00;
 126:	12 ba       	out	0x12, r1	; 18
	cmd(0X0E);
	cmd(0X06);
	cmd(0X01);
	while(1)
	{
			PORTC=0X06;
 128:	16 e0       	ldi	r17, 0x06	; 6
	}
}

void cmd(int a)
{
	PORTB=a;
 12a:	71 e0       	ldi	r23, 0x01	; 1
	PORTD=0X40;
 12c:	60 e4       	ldi	r22, 0x40	; 64
 12e:	29 e1       	ldi	r18, 0x19	; 25
 130:	30 e0       	ldi	r19, 0x00	; 0
}

void data(char b)
{
	PORTB=b;
	PORTD=0X60;
 132:	50 e6       	ldi	r21, 0x60	; 96
	_delay_ms(500);
	PORTD=0X20;
 134:	40 e2       	ldi	r20, 0x20	; 32
	cmd(0X0E);
	cmd(0X06);
	cmd(0X01);
	while(1)
	{
			PORTC=0X06;
 136:	15 bb       	out	0x15, r17	; 21
	}
}

void cmd(int a)
{
	PORTB=a;
 138:	78 bb       	out	0x18, r23	; 24
	PORTD=0X40;
 13a:	62 bb       	out	0x12, r22	; 18
 13c:	88 e8       	ldi	r24, 0x88	; 136
 13e:	93 e1       	ldi	r25, 0x13	; 19
 140:	f9 01       	movw	r30, r18
 142:	31 97       	sbiw	r30, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <main+0xb0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 146:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 148:	d9 f7       	brne	.-10     	; 0x140 <main+0xae>
	_delay_ms(500);
	PORTD=0X00;
 14a:	12 ba       	out	0x12, r1	; 18
 14c:	a0 e6       	ldi	r26, 0x60	; 96
 14e:	b0 e0       	ldi	r27, 0x00	; 0
 150:	0b c0       	rjmp	.+22     	; 0x168 <main+0xd6>
}

void data(char b)
{
	PORTB=b;
 152:	88 bb       	out	0x18, r24	; 24
	PORTD=0X60;
 154:	52 bb       	out	0x12, r21	; 18
 156:	88 e8       	ldi	r24, 0x88	; 136
 158:	93 e1       	ldi	r25, 0x13	; 19
 15a:	f9 01       	movw	r30, r18
 15c:	31 97       	sbiw	r30, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <main+0xca>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 160:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 162:	d9 f7       	brne	.-10     	; 0x15a <main+0xc8>
	_delay_ms(500);
	PORTD=0X20;
 164:	42 bb       	out	0x12, r20	; 18
void display(const char *p)
{
	while(*p!='\0')
	{
		data(*p);
		p++;
 166:	11 96       	adiw	r26, 0x01	; 1
	PORTD=0X20;
}

void display(const char *p)
{
	while(*p!='\0')
 168:	8c 91       	ld	r24, X
 16a:	88 23       	and	r24, r24
 16c:	21 f3       	breq	.-56     	; 0x136 <main+0xa4>
 16e:	f1 cf       	rjmp	.-30     	; 0x152 <main+0xc0>

00000170 <cmd>:
			display("Forward");
	}
}

void cmd(int a)
{
 170:	88 bb       	out	0x18, r24	; 24
	PORTB=a;
	PORTD=0X40;
 172:	80 e4       	ldi	r24, 0x40	; 64
 174:	82 bb       	out	0x12, r24	; 18
 176:	88 e8       	ldi	r24, 0x88	; 136
 178:	93 e1       	ldi	r25, 0x13	; 19
 17a:	29 e1       	ldi	r18, 0x19	; 25
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	f9 01       	movw	r30, r18
 180:	31 97       	sbiw	r30, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <cmd+0x10>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 184:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 186:	d9 f7       	brne	.-10     	; 0x17e <cmd+0xe>
	_delay_ms(500);
	PORTD=0X00;
 188:	12 ba       	out	0x12, r1	; 18
}
 18a:	08 95       	ret

0000018c <data>:

void data(char b)
{
 18c:	88 bb       	out	0x18, r24	; 24
	PORTB=b;
	PORTD=0X60;
 18e:	80 e6       	ldi	r24, 0x60	; 96
 190:	82 bb       	out	0x12, r24	; 18
 192:	88 e8       	ldi	r24, 0x88	; 136
 194:	93 e1       	ldi	r25, 0x13	; 19
 196:	29 e1       	ldi	r18, 0x19	; 25
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	f9 01       	movw	r30, r18
 19c:	31 97       	sbiw	r30, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <data+0x10>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1a0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1a2:	d9 f7       	brne	.-10     	; 0x19a <data+0xe>
	_delay_ms(500);
	PORTD=0X20;
 1a4:	80 e2       	ldi	r24, 0x20	; 32
 1a6:	82 bb       	out	0x12, r24	; 18
}
 1a8:	08 95       	ret

000001aa <display>:

void display(const char *p)
{
 1aa:	dc 01       	movw	r26, r24
}

void data(char b)
{
	PORTB=b;
	PORTD=0X60;
 1ac:	50 e6       	ldi	r21, 0x60	; 96
 1ae:	29 e1       	ldi	r18, 0x19	; 25
 1b0:	30 e0       	ldi	r19, 0x00	; 0
	_delay_ms(500);
	PORTD=0X20;
 1b2:	40 e2       	ldi	r20, 0x20	; 32
 1b4:	0b c0       	rjmp	.+22     	; 0x1cc <display+0x22>
	PORTD=0X00;
}

void data(char b)
{
	PORTB=b;
 1b6:	88 bb       	out	0x18, r24	; 24
	PORTD=0X60;
 1b8:	52 bb       	out	0x12, r21	; 18
 1ba:	88 e8       	ldi	r24, 0x88	; 136
 1bc:	93 e1       	ldi	r25, 0x13	; 19
 1be:	f9 01       	movw	r30, r18
 1c0:	31 97       	sbiw	r30, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <display+0x16>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1c4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1c6:	d9 f7       	brne	.-10     	; 0x1be <display+0x14>
	_delay_ms(500);
	PORTD=0X20;
 1c8:	42 bb       	out	0x12, r20	; 18
void display(const char *p)
{
	while(*p!='\0')
	{
		data(*p);
		p++;
 1ca:	11 96       	adiw	r26, 0x01	; 1
	PORTD=0X20;
}

void display(const char *p)
{
	while(*p!='\0')
 1cc:	8c 91       	ld	r24, X
 1ce:	88 23       	and	r24, r24
 1d0:	91 f7       	brne	.-28     	; 0x1b6 <display+0xc>
	{
		data(*p);
		p++;
	}
}
 1d2:	08 95       	ret

000001d4 <_exit>:
 1d4:	f8 94       	cli

000001d6 <__stop_program>:
 1d6:	ff cf       	rjmp	.-2      	; 0x1d6 <__stop_program>
