
ADC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000025e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000002b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000002c  00000000  00000000  000002d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000056b  00000000  00000000  000002fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000015d  00000000  00000000  00000869  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000408  00000000  00000000  000009c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000b9  00000000  00000000  00000e10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000213  00000000  00000000  00000ec9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000078  00000000  00000000  000010dc  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e5       	ldi	r30, 0x5E	; 94
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 2d 01 	jmp	0x25a	; 0x25a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <main>:
#include<avr/io.h>
#include<util/delay.h>
void cmd(int a);
void data(char b);
void main()
{
  92:	ff 92       	push	r15
  94:	0f 93       	push	r16
  96:	1f 93       	push	r17
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
	int a,b,c,d;
	DDRA=0X00;
  9c:	1a ba       	out	0x1a, r1	; 26
	DDRB=0XFF;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	87 bb       	out	0x17, r24	; 23
	DDRD=0XFF;
  a2:	81 bb       	out	0x11, r24	; 17
		cmd(0X01);
	}
}
void cmd(int a)
{
	PORTB=a;
  a4:	88 e3       	ldi	r24, 0x38	; 56
  a6:	88 bb       	out	0x18, r24	; 24
	PORTD=0X40;
  a8:	80 e4       	ldi	r24, 0x40	; 64
  aa:	82 bb       	out	0x12, r24	; 18
  ac:	88 e8       	ldi	r24, 0x88	; 136
  ae:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b0:	29 e1       	ldi	r18, 0x19	; 25
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	f9 01       	movw	r30, r18
  b6:	31 97       	sbiw	r30, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <main+0x24>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ba:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  bc:	d9 f7       	brne	.-10     	; 0xb4 <main+0x22>
	_delay_ms(500);
	PORTD=0X00;
  be:	12 ba       	out	0x12, r1	; 18
		cmd(0X01);
	}
}
void cmd(int a)
{
	PORTB=a;
  c0:	80 e8       	ldi	r24, 0x80	; 128
  c2:	88 bb       	out	0x18, r24	; 24
	PORTD=0X40;
  c4:	80 e4       	ldi	r24, 0x40	; 64
  c6:	82 bb       	out	0x12, r24	; 18
  c8:	88 e8       	ldi	r24, 0x88	; 136
  ca:	93 e1       	ldi	r25, 0x13	; 19
  cc:	29 e1       	ldi	r18, 0x19	; 25
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	f9 01       	movw	r30, r18
  d2:	31 97       	sbiw	r30, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <main+0x40>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d8:	d9 f7       	brne	.-10     	; 0xd0 <main+0x3e>
	_delay_ms(500);
	PORTD=0X00;
  da:	12 ba       	out	0x12, r1	; 18
		cmd(0X01);
	}
}
void cmd(int a)
{
	PORTB=a;
  dc:	86 e0       	ldi	r24, 0x06	; 6
  de:	88 bb       	out	0x18, r24	; 24
	PORTD=0X40;
  e0:	80 e4       	ldi	r24, 0x40	; 64
  e2:	82 bb       	out	0x12, r24	; 18
  e4:	88 e8       	ldi	r24, 0x88	; 136
  e6:	93 e1       	ldi	r25, 0x13	; 19
  e8:	29 e1       	ldi	r18, 0x19	; 25
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	f9 01       	movw	r30, r18
  ee:	31 97       	sbiw	r30, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <main+0x5c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f4:	d9 f7       	brne	.-10     	; 0xec <main+0x5a>
	_delay_ms(500);
	PORTD=0X00;
  f6:	12 ba       	out	0x12, r1	; 18
		cmd(0X01);
	}
}
void cmd(int a)
{
	PORTB=a;
  f8:	8e e0       	ldi	r24, 0x0E	; 14
  fa:	88 bb       	out	0x18, r24	; 24
	PORTD=0X40;
  fc:	80 e4       	ldi	r24, 0x40	; 64
  fe:	82 bb       	out	0x12, r24	; 18
 100:	88 e8       	ldi	r24, 0x88	; 136
 102:	93 e1       	ldi	r25, 0x13	; 19
 104:	29 e1       	ldi	r18, 0x19	; 25
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	f9 01       	movw	r30, r18
 10a:	31 97       	sbiw	r30, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <main+0x78>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 10e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 110:	d9 f7       	brne	.-10     	; 0x108 <main+0x76>
	_delay_ms(500);
	PORTD=0X00;
 112:	12 ba       	out	0x12, r1	; 18
		cmd(0X01);
	}
}
void cmd(int a)
{
	PORTB=a;
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	88 bb       	out	0x18, r24	; 24
	PORTD=0X40;
 118:	80 e4       	ldi	r24, 0x40	; 64
 11a:	82 bb       	out	0x12, r24	; 18
 11c:	88 e8       	ldi	r24, 0x88	; 136
 11e:	93 e1       	ldi	r25, 0x13	; 19
 120:	29 e1       	ldi	r18, 0x19	; 25
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	f9 01       	movw	r30, r18
 126:	31 97       	sbiw	r30, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <main+0x94>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 12a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 12c:	d9 f7       	brne	.-10     	; 0x124 <main+0x92>
	_delay_ms(500);
	PORTD=0X00;
 12e:	12 ba       	out	0x12, r1	; 18
	cmd(0X38);
	cmd(0X80);
	cmd(0X06);
	cmd(0X0E);
	cmd(0X01);
	ADMUX=0X60;
 130:	80 e6       	ldi	r24, 0x60	; 96
 132:	87 b9       	out	0x07, r24	; 7
	while(1)
	{
		ADCSRA=0XC0;
 134:	80 ec       	ldi	r24, 0xC0	; 192
 136:	f8 2e       	mov	r15, r24
	PORTD=0X00;
}
void data(char b)
{
	PORTB=b;
	PORTD=0X60;
 138:	40 e6       	ldi	r20, 0x60	; 96
 13a:	c9 e1       	ldi	r28, 0x19	; 25
 13c:	d0 e0       	ldi	r29, 0x00	; 0
	_delay_ms(500);
	PORTD=0X20;
 13e:	30 e2       	ldi	r19, 0x20	; 32
		cmd(0X01);
	}
}
void cmd(int a)
{
	PORTB=a;
 140:	01 e0       	ldi	r16, 0x01	; 1
	PORTD=0X40;
 142:	10 e4       	ldi	r17, 0x40	; 64
	cmd(0X0E);
	cmd(0X01);
	ADMUX=0X60;
	while(1)
	{
		ADCSRA=0XC0;
 144:	f6 b8       	out	0x06, r15	; 6
		while((ADCSRA&0X40)==1);
 146:	86 b1       	in	r24, 0x06	; 6
		a=ADCH;
 148:	25 b1       	in	r18, 0x05	; 5
		b=(a/100)+48;
		data(b);
 14a:	82 2f       	mov	r24, r18
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	64 e6       	ldi	r22, 0x64	; 100
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	0e 94 06 01 	call	0x20c	; 0x20c <__divmodhi4>
 156:	60 5d       	subi	r22, 0xD0	; 208
 158:	7f 4f       	sbci	r23, 0xFF	; 255
	_delay_ms(500);
	PORTD=0X00;
}
void data(char b)
{
	PORTB=b;
 15a:	68 bb       	out	0x18, r22	; 24
	PORTD=0X60;
 15c:	42 bb       	out	0x12, r20	; 18
 15e:	88 e8       	ldi	r24, 0x88	; 136
 160:	93 e1       	ldi	r25, 0x13	; 19
 162:	fe 01       	movw	r30, r28
 164:	31 97       	sbiw	r30, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <main+0xd2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 168:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 16a:	d9 f7       	brne	.-10     	; 0x162 <main+0xd0>
	_delay_ms(500);
	PORTD=0X20;
 16c:	32 bb       	out	0x12, r19	; 18
		while((ADCSRA&0X40)==1);
		a=ADCH;
		b=(a/100)+48;
		data(b);
		c=((a%100)/10)+48;
		data(c);
 16e:	82 2f       	mov	r24, r18
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	64 e6       	ldi	r22, 0x64	; 100
 174:	70 e0       	ldi	r23, 0x00	; 0
 176:	0e 94 06 01 	call	0x20c	; 0x20c <__divmodhi4>
 17a:	6a e0       	ldi	r22, 0x0A	; 10
 17c:	70 e0       	ldi	r23, 0x00	; 0
 17e:	0e 94 06 01 	call	0x20c	; 0x20c <__divmodhi4>
 182:	60 5d       	subi	r22, 0xD0	; 208
 184:	7f 4f       	sbci	r23, 0xFF	; 255
	_delay_ms(500);
	PORTD=0X00;
}
void data(char b)
{
	PORTB=b;
 186:	68 bb       	out	0x18, r22	; 24
	PORTD=0X60;
 188:	42 bb       	out	0x12, r20	; 18
 18a:	88 e8       	ldi	r24, 0x88	; 136
 18c:	93 e1       	ldi	r25, 0x13	; 19
 18e:	fe 01       	movw	r30, r28
 190:	31 97       	sbiw	r30, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <main+0xfe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 194:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 196:	d9 f7       	brne	.-10     	; 0x18e <main+0xfc>
	_delay_ms(500);
	PORTD=0X20;
 198:	32 bb       	out	0x12, r19	; 18
		b=(a/100)+48;
		data(b);
		c=((a%100)/10)+48;
		data(c);
		d=(a%10)+48;
		data(d);
 19a:	82 2f       	mov	r24, r18
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	6a e0       	ldi	r22, 0x0A	; 10
 1a0:	70 e0       	ldi	r23, 0x00	; 0
 1a2:	0e 94 06 01 	call	0x20c	; 0x20c <__divmodhi4>
 1a6:	c0 96       	adiw	r24, 0x30	; 48
	_delay_ms(500);
	PORTD=0X00;
}
void data(char b)
{
	PORTB=b;
 1a8:	88 bb       	out	0x18, r24	; 24
	PORTD=0X60;
 1aa:	42 bb       	out	0x12, r20	; 18
 1ac:	88 e8       	ldi	r24, 0x88	; 136
 1ae:	93 e1       	ldi	r25, 0x13	; 19
 1b0:	fe 01       	movw	r30, r28
 1b2:	31 97       	sbiw	r30, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <main+0x120>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1b6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1b8:	d9 f7       	brne	.-10     	; 0x1b0 <main+0x11e>
	_delay_ms(500);
	PORTD=0X20;
 1ba:	32 bb       	out	0x12, r19	; 18
		cmd(0X01);
	}
}
void cmd(int a)
{
	PORTB=a;
 1bc:	08 bb       	out	0x18, r16	; 24
	PORTD=0X40;
 1be:	12 bb       	out	0x12, r17	; 18
 1c0:	88 e8       	ldi	r24, 0x88	; 136
 1c2:	93 e1       	ldi	r25, 0x13	; 19
 1c4:	fe 01       	movw	r30, r28
 1c6:	31 97       	sbiw	r30, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <main+0x134>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1cc:	d9 f7       	brne	.-10     	; 0x1c4 <main+0x132>
	_delay_ms(500);
	PORTD=0X00;
 1ce:	12 ba       	out	0x12, r1	; 18
 1d0:	b9 cf       	rjmp	.-142    	; 0x144 <main+0xb2>

000001d2 <cmd>:
		data(d);
		cmd(0X01);
	}
}
void cmd(int a)
{
 1d2:	88 bb       	out	0x18, r24	; 24
	PORTB=a;
	PORTD=0X40;
 1d4:	80 e4       	ldi	r24, 0x40	; 64
 1d6:	82 bb       	out	0x12, r24	; 18
 1d8:	88 e8       	ldi	r24, 0x88	; 136
 1da:	93 e1       	ldi	r25, 0x13	; 19
 1dc:	29 e1       	ldi	r18, 0x19	; 25
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	f9 01       	movw	r30, r18
 1e2:	31 97       	sbiw	r30, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <cmd+0x10>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1e6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1e8:	d9 f7       	brne	.-10     	; 0x1e0 <cmd+0xe>
	_delay_ms(500);
	PORTD=0X00;
 1ea:	12 ba       	out	0x12, r1	; 18
}
 1ec:	08 95       	ret

000001ee <data>:
void data(char b)
{
 1ee:	88 bb       	out	0x18, r24	; 24
	PORTB=b;
	PORTD=0X60;
 1f0:	80 e6       	ldi	r24, 0x60	; 96
 1f2:	82 bb       	out	0x12, r24	; 18
 1f4:	88 e8       	ldi	r24, 0x88	; 136
 1f6:	93 e1       	ldi	r25, 0x13	; 19
 1f8:	29 e1       	ldi	r18, 0x19	; 25
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	f9 01       	movw	r30, r18
 1fe:	31 97       	sbiw	r30, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <data+0x10>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 202:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 204:	d9 f7       	brne	.-10     	; 0x1fc <data+0xe>
	_delay_ms(500);
	PORTD=0X20;
 206:	80 e2       	ldi	r24, 0x20	; 32
 208:	82 bb       	out	0x12, r24	; 18
}
 20a:	08 95       	ret

0000020c <__divmodhi4>:
 20c:	97 fb       	bst	r25, 7
 20e:	09 2e       	mov	r0, r25
 210:	07 26       	eor	r0, r23
 212:	0a d0       	rcall	.+20     	; 0x228 <__divmodhi4_neg1>
 214:	77 fd       	sbrc	r23, 7
 216:	04 d0       	rcall	.+8      	; 0x220 <__divmodhi4_neg2>
 218:	0c d0       	rcall	.+24     	; 0x232 <__udivmodhi4>
 21a:	06 d0       	rcall	.+12     	; 0x228 <__divmodhi4_neg1>
 21c:	00 20       	and	r0, r0
 21e:	1a f4       	brpl	.+6      	; 0x226 <__divmodhi4_exit>

00000220 <__divmodhi4_neg2>:
 220:	70 95       	com	r23
 222:	61 95       	neg	r22
 224:	7f 4f       	sbci	r23, 0xFF	; 255

00000226 <__divmodhi4_exit>:
 226:	08 95       	ret

00000228 <__divmodhi4_neg1>:
 228:	f6 f7       	brtc	.-4      	; 0x226 <__divmodhi4_exit>
 22a:	90 95       	com	r25
 22c:	81 95       	neg	r24
 22e:	9f 4f       	sbci	r25, 0xFF	; 255
 230:	08 95       	ret

00000232 <__udivmodhi4>:
 232:	aa 1b       	sub	r26, r26
 234:	bb 1b       	sub	r27, r27
 236:	51 e1       	ldi	r21, 0x11	; 17
 238:	07 c0       	rjmp	.+14     	; 0x248 <__udivmodhi4_ep>

0000023a <__udivmodhi4_loop>:
 23a:	aa 1f       	adc	r26, r26
 23c:	bb 1f       	adc	r27, r27
 23e:	a6 17       	cp	r26, r22
 240:	b7 07       	cpc	r27, r23
 242:	10 f0       	brcs	.+4      	; 0x248 <__udivmodhi4_ep>
 244:	a6 1b       	sub	r26, r22
 246:	b7 0b       	sbc	r27, r23

00000248 <__udivmodhi4_ep>:
 248:	88 1f       	adc	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	5a 95       	dec	r21
 24e:	a9 f7       	brne	.-22     	; 0x23a <__udivmodhi4_loop>
 250:	80 95       	com	r24
 252:	90 95       	com	r25
 254:	bc 01       	movw	r22, r24
 256:	cd 01       	movw	r24, r26
 258:	08 95       	ret

0000025a <_exit>:
 25a:	f8 94       	cli

0000025c <__stop_program>:
 25c:	ff cf       	rjmp	.-2      	; 0x25c <__stop_program>
