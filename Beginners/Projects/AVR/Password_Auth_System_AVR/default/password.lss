
password.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  000003da  0000044e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000040  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000006dc  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001bd  00000000  00000000  00000ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000005e3  00000000  00000000  00000d61  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  00001344  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000c5  00000000  00000000  000013a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000349  00000000  00000000  00001469  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000138  00000000  00000000  000017b2  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ed       	ldi	r30, 0xDA	; 218
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 37       	cpi	r26, 0x7A	; 122
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 bf 00 	call	0x17e	; 0x17e <main>
  8a:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <key>:
	}
	
}

char key()
{
  92:	5f e7       	ldi	r21, 0x7F	; 127
			case 0X0E:
			return('4');
			break;
		}

		PORTD=0XBF;
  94:	4f eb       	ldi	r20, 0xBF	; 191
			case 0X0E:
			return('8');
			break;
		}

		PORTD=0XDF;
  96:	3f ed       	ldi	r19, 0xDF	; 223
			case 0X0E:
			return('0');
			break;
		}

		PORTD=0XEF;
  98:	2f ee       	ldi	r18, 0xEF	; 239
char key()
{
	int e;
	while(1)
	{
		PORTD=0X7F;
  9a:	52 bb       	out	0x12, r21	; 18
		e=PIND&0X0F;
  9c:	80 b3       	in	r24, 0x10	; 16
		switch(e)
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	8f 70       	andi	r24, 0x0F	; 15
  a2:	90 70       	andi	r25, 0x00	; 0
  a4:	8b 30       	cpi	r24, 0x0B	; 11
  a6:	91 05       	cpc	r25, r1
  a8:	61 f0       	breq	.+24     	; 0xc2 <key+0x30>
  aa:	8c 30       	cpi	r24, 0x0C	; 12
  ac:	91 05       	cpc	r25, r1
  ae:	1c f4       	brge	.+6      	; 0xb6 <key+0x24>
  b0:	07 97       	sbiw	r24, 0x07	; 7
  b2:	79 f4       	brne	.+30     	; 0xd2 <key+0x40>
  b4:	08 c0       	rjmp	.+16     	; 0xc6 <key+0x34>
  b6:	8d 30       	cpi	r24, 0x0D	; 13
  b8:	91 05       	cpc	r25, r1
  ba:	39 f0       	breq	.+14     	; 0xca <key+0x38>
  bc:	0e 97       	sbiw	r24, 0x0e	; 14
  be:	49 f4       	brne	.+18     	; 0xd2 <key+0x40>
  c0:	06 c0       	rjmp	.+12     	; 0xce <key+0x3c>
  c2:	82 e3       	ldi	r24, 0x32	; 50
  c4:	08 95       	ret
  c6:	81 e3       	ldi	r24, 0x31	; 49
  c8:	08 95       	ret
  ca:	83 e3       	ldi	r24, 0x33	; 51
  cc:	08 95       	ret
			case 0X0B:
			return('2');
			break;

			case 0X0D:
			return('3');
  ce:	84 e3       	ldi	r24, 0x34	; 52
  d0:	08 95       	ret
			case 0X0E:
			return('4');
			break;
		}

		PORTD=0XBF;
  d2:	42 bb       	out	0x12, r20	; 18
		e=PIND&0X0F;
  d4:	80 b3       	in	r24, 0x10	; 16
		switch(e)
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	8f 70       	andi	r24, 0x0F	; 15
  da:	90 70       	andi	r25, 0x00	; 0
  dc:	8b 30       	cpi	r24, 0x0B	; 11
  de:	91 05       	cpc	r25, r1
  e0:	61 f0       	breq	.+24     	; 0xfa <key+0x68>
  e2:	8c 30       	cpi	r24, 0x0C	; 12
  e4:	91 05       	cpc	r25, r1
  e6:	1c f4       	brge	.+6      	; 0xee <key+0x5c>
  e8:	07 97       	sbiw	r24, 0x07	; 7
  ea:	79 f4       	brne	.+30     	; 0x10a <key+0x78>
  ec:	08 c0       	rjmp	.+16     	; 0xfe <key+0x6c>
  ee:	8d 30       	cpi	r24, 0x0D	; 13
  f0:	91 05       	cpc	r25, r1
  f2:	39 f0       	breq	.+14     	; 0x102 <key+0x70>
  f4:	0e 97       	sbiw	r24, 0x0e	; 14
  f6:	49 f4       	brne	.+18     	; 0x10a <key+0x78>
  f8:	06 c0       	rjmp	.+12     	; 0x106 <key+0x74>
  fa:	86 e3       	ldi	r24, 0x36	; 54
  fc:	08 95       	ret
  fe:	85 e3       	ldi	r24, 0x35	; 53
 100:	08 95       	ret
 102:	87 e3       	ldi	r24, 0x37	; 55
 104:	08 95       	ret
			case 0X0B:
			return('6');
			break;

			case 0X0D:
			return('7');
 106:	88 e3       	ldi	r24, 0x38	; 56
 108:	08 95       	ret
			case 0X0E:
			return('8');
			break;
		}

		PORTD=0XDF;
 10a:	32 bb       	out	0x12, r19	; 18
		e=PIND&0X0F;
 10c:	80 b3       	in	r24, 0x10	; 16
		switch(e)
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	8f 70       	andi	r24, 0x0F	; 15
 112:	90 70       	andi	r25, 0x00	; 0
 114:	8b 30       	cpi	r24, 0x0B	; 11
 116:	91 05       	cpc	r25, r1
 118:	61 f0       	breq	.+24     	; 0x132 <key+0xa0>
 11a:	8c 30       	cpi	r24, 0x0C	; 12
 11c:	91 05       	cpc	r25, r1
 11e:	1c f4       	brge	.+6      	; 0x126 <key+0x94>
 120:	07 97       	sbiw	r24, 0x07	; 7
 122:	79 f4       	brne	.+30     	; 0x142 <key+0xb0>
 124:	08 c0       	rjmp	.+16     	; 0x136 <key+0xa4>
 126:	8d 30       	cpi	r24, 0x0D	; 13
 128:	91 05       	cpc	r25, r1
 12a:	39 f0       	breq	.+14     	; 0x13a <key+0xa8>
 12c:	0e 97       	sbiw	r24, 0x0e	; 14
 12e:	49 f4       	brne	.+18     	; 0x142 <key+0xb0>
 130:	06 c0       	rjmp	.+12     	; 0x13e <key+0xac>
 132:	8a e2       	ldi	r24, 0x2A	; 42
 134:	08 95       	ret
 136:	89 e3       	ldi	r24, 0x39	; 57
 138:	08 95       	ret
 13a:	83 e2       	ldi	r24, 0x23	; 35
 13c:	08 95       	ret
			case 0X0B:
			return('*');
			break;

			case 0X0D:
			return('#');
 13e:	80 e3       	ldi	r24, 0x30	; 48
 140:	08 95       	ret
			case 0X0E:
			return('0');
			break;
		}

		PORTD=0XEF;
 142:	22 bb       	out	0x12, r18	; 18
		e=PIND&0X0F;
 144:	80 b3       	in	r24, 0x10	; 16
		switch(e)
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	8f 70       	andi	r24, 0x0F	; 15
 14a:	90 70       	andi	r25, 0x00	; 0
 14c:	8b 30       	cpi	r24, 0x0B	; 11
 14e:	91 05       	cpc	r25, r1
 150:	71 f0       	breq	.+28     	; 0x16e <key+0xdc>
 152:	8c 30       	cpi	r24, 0x0C	; 12
 154:	91 05       	cpc	r25, r1
 156:	24 f4       	brge	.+8      	; 0x160 <key+0xce>
 158:	07 97       	sbiw	r24, 0x07	; 7
 15a:	09 f0       	breq	.+2      	; 0x15e <key+0xcc>
 15c:	9e cf       	rjmp	.-196    	; 0x9a <key+0x8>
 15e:	09 c0       	rjmp	.+18     	; 0x172 <key+0xe0>
 160:	8d 30       	cpi	r24, 0x0D	; 13
 162:	91 05       	cpc	r25, r1
 164:	41 f0       	breq	.+16     	; 0x176 <key+0xe4>
 166:	0e 97       	sbiw	r24, 0x0e	; 14
 168:	09 f0       	breq	.+2      	; 0x16c <key+0xda>
 16a:	97 cf       	rjmp	.-210    	; 0x9a <key+0x8>
 16c:	06 c0       	rjmp	.+12     	; 0x17a <key+0xe8>
 16e:	81 e4       	ldi	r24, 0x41	; 65
 170:	08 95       	ret
 172:	88 e4       	ldi	r24, 0x48	; 72
 174:	08 95       	ret
 176:	82 e5       	ldi	r24, 0x52	; 82
 178:	08 95       	ret
			case 0X0B:
			return('A');
			break;

			case 0X0D:
			return('R');
 17a:	8f e4       	ldi	r24, 0x4F	; 79
			case 0X0E:
			return('O');
			break;
		}
	}
}
 17c:	08 95       	ret

0000017e <main>:
char key();
void cmd(int);
void data(char);
void display(const char *);
void main()
{
 17e:	6f 92       	push	r6
 180:	7f 92       	push	r7
 182:	8f 92       	push	r8
 184:	9f 92       	push	r9
 186:	af 92       	push	r10
 188:	bf 92       	push	r11
 18a:	cf 92       	push	r12
 18c:	df 92       	push	r13
 18e:	ef 92       	push	r14
 190:	ff 92       	push	r15
 192:	0f 93       	push	r16
 194:	1f 93       	push	r17
 196:	df 93       	push	r29
 198:	cf 93       	push	r28
 19a:	00 d0       	rcall	.+0      	; 0x19c <main+0x1e>
 19c:	00 d0       	rcall	.+0      	; 0x19e <main+0x20>
 19e:	cd b7       	in	r28, 0x3d	; 61
 1a0:	de b7       	in	r29, 0x3e	; 62
	
	char a[4],b[4]="1234";
 1a2:	90 90 75 00 	lds	r9, 0x0075
 1a6:	80 90 76 00 	lds	r8, 0x0076
 1aa:	70 90 77 00 	lds	r7, 0x0077
 1ae:	60 90 78 00 	lds	r6, 0x0078
	int c=0,i;
	DDRD=0XF0;
 1b2:	80 ef       	ldi	r24, 0xF0	; 240
 1b4:	81 bb       	out	0x11, r24	; 17
	DDRC=0XFF;
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	84 bb       	out	0x14, r24	; 20
	DDRB=0XFF;
 1ba:	87 bb       	out	0x17, r24	; 23
		}
	}
}
void cmd(int a)
{
	PORTB=a;
 1bc:	88 e3       	ldi	r24, 0x38	; 56
 1be:	88 bb       	out	0x18, r24	; 24
	PORTC=0X02;
 1c0:	82 e0       	ldi	r24, 0x02	; 2
 1c2:	85 bb       	out	0x15, r24	; 21
 1c4:	80 e2       	ldi	r24, 0x20	; 32
 1c6:	9e e4       	ldi	r25, 0x4E	; 78
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1c8:	29 e1       	ldi	r18, 0x19	; 25
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	f9 01       	movw	r30, r18
 1ce:	31 97       	sbiw	r30, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <main+0x50>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1d2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1d4:	d9 f7       	brne	.-10     	; 0x1cc <main+0x4e>
	_delay_ms(2000);
	PORTC=0X00;
 1d6:	15 ba       	out	0x15, r1	; 21
		}
	}
}
void cmd(int a)
{
	PORTB=a;
 1d8:	80 e8       	ldi	r24, 0x80	; 128
 1da:	88 bb       	out	0x18, r24	; 24
	PORTC=0X02;
 1dc:	82 e0       	ldi	r24, 0x02	; 2
 1de:	85 bb       	out	0x15, r24	; 21
 1e0:	80 e2       	ldi	r24, 0x20	; 32
 1e2:	9e e4       	ldi	r25, 0x4E	; 78
 1e4:	29 e1       	ldi	r18, 0x19	; 25
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	f9 01       	movw	r30, r18
 1ea:	31 97       	sbiw	r30, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <main+0x6c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ee:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1f0:	d9 f7       	brne	.-10     	; 0x1e8 <main+0x6a>
	_delay_ms(2000);
	PORTC=0X00;
 1f2:	15 ba       	out	0x15, r1	; 21
		}
	}
}
void cmd(int a)
{
	PORTB=a;
 1f4:	8e e0       	ldi	r24, 0x0E	; 14
 1f6:	88 bb       	out	0x18, r24	; 24
	PORTC=0X02;
 1f8:	82 e0       	ldi	r24, 0x02	; 2
 1fa:	85 bb       	out	0x15, r24	; 21
 1fc:	80 e2       	ldi	r24, 0x20	; 32
 1fe:	9e e4       	ldi	r25, 0x4E	; 78
 200:	29 e1       	ldi	r18, 0x19	; 25
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	f9 01       	movw	r30, r18
 206:	31 97       	sbiw	r30, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <main+0x88>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 20a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 20c:	d9 f7       	brne	.-10     	; 0x204 <main+0x86>
	_delay_ms(2000);
	PORTC=0X00;
 20e:	15 ba       	out	0x15, r1	; 21
		}
	}
}
void cmd(int a)
{
	PORTB=a;
 210:	86 e0       	ldi	r24, 0x06	; 6
 212:	88 bb       	out	0x18, r24	; 24
	PORTC=0X02;
 214:	82 e0       	ldi	r24, 0x02	; 2
 216:	85 bb       	out	0x15, r24	; 21
 218:	80 e2       	ldi	r24, 0x20	; 32
 21a:	9e e4       	ldi	r25, 0x4E	; 78
 21c:	29 e1       	ldi	r18, 0x19	; 25
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	f9 01       	movw	r30, r18
 222:	31 97       	sbiw	r30, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <main+0xa4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 226:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 228:	d9 f7       	brne	.-10     	; 0x220 <main+0xa2>
	_delay_ms(2000);
	PORTC=0X00;
 22a:	15 ba       	out	0x15, r1	; 21
		}
	}
}
void cmd(int a)
{
	PORTB=a;
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	88 bb       	out	0x18, r24	; 24
	PORTC=0X02;
 230:	82 e0       	ldi	r24, 0x02	; 2
 232:	85 bb       	out	0x15, r24	; 21
 234:	80 e2       	ldi	r24, 0x20	; 32
 236:	9e e4       	ldi	r25, 0x4E	; 78
 238:	29 e1       	ldi	r18, 0x19	; 25
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	f9 01       	movw	r30, r18
 23e:	31 97       	sbiw	r30, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <main+0xc0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 242:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 244:	d9 f7       	brne	.-10     	; 0x23c <main+0xbe>
	_delay_ms(2000);
	PORTC=0X00;
 246:	15 ba       	out	0x15, r1	; 21
 248:	8e 01       	movw	r16, r28
 24a:	0f 5f       	subi	r16, 0xFF	; 255
 24c:	1f 4f       	sbci	r17, 0xFF	; 255
}

void data(char b)
{
	PORTB=b;
	PORTC=0X03;
 24e:	23 e0       	ldi	r18, 0x03	; 3
 250:	a2 2e       	mov	r10, r18
 252:	99 e1       	ldi	r25, 0x19	; 25
 254:	c9 2e       	mov	r12, r25
 256:	d1 2c       	mov	r13, r1
	_delay_ms(2000);
	PORTC=0X01;
 258:	bb 24       	eor	r11, r11
 25a:	b3 94       	inc	r11
	cmd(0X38);
	cmd(0X80);
	cmd(0X0E);
	cmd(0X06);
	cmd(0X01);
	for(i=0;i<4;i++)
 25c:	85 e0       	ldi	r24, 0x05	; 5
 25e:	e8 2e       	mov	r14, r24
 260:	f1 2c       	mov	r15, r1
 262:	ec 0e       	add	r14, r28
 264:	fd 1e       	adc	r15, r29
	{
	a[i]=key();
 266:	0e 94 49 00 	call	0x92	; 0x92 <key>
 26a:	f8 01       	movw	r30, r16
 26c:	80 83       	st	Z, r24
	PORTC=0X00;
}

void data(char b)
{
	PORTB=b;
 26e:	88 bb       	out	0x18, r24	; 24
	PORTC=0X03;
 270:	a5 ba       	out	0x15, r10	; 21
 272:	80 e2       	ldi	r24, 0x20	; 32
 274:	9e e4       	ldi	r25, 0x4E	; 78
 276:	f6 01       	movw	r30, r12
 278:	31 97       	sbiw	r30, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <main+0xfa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 27c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 27e:	d9 f7       	brne	.-10     	; 0x276 <main+0xf8>
	_delay_ms(2000);
	PORTC=0X01;
 280:	b5 ba       	out	0x15, r11	; 21
 282:	0f 5f       	subi	r16, 0xFF	; 255
 284:	1f 4f       	sbci	r17, 0xFF	; 255
	cmd(0X38);
	cmd(0X80);
	cmd(0X0E);
	cmd(0X06);
	cmd(0X01);
	for(i=0;i<4;i++)
 286:	0e 15       	cp	r16, r14
 288:	1f 05       	cpc	r17, r15
 28a:	69 f7       	brne	.-38     	; 0x266 <main+0xe8>
 28c:	20 e0       	ldi	r18, 0x00	; 0
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	89 81       	ldd	r24, Y+1	; 0x01
 292:	89 15       	cp	r24, r9
 294:	11 f4       	brne	.+4      	; 0x29a <main+0x11c>
 296:	21 e0       	ldi	r18, 0x01	; 1
 298:	30 e0       	ldi	r19, 0x00	; 0
	a[i]=key();
	data(a[i]);
	}
	for(i=0;i<4;i++)
	{
	if(a[i]==b[i])
 29a:	8a 81       	ldd	r24, Y+2	; 0x02
 29c:	88 15       	cp	r24, r8
 29e:	11 f4       	brne	.+4      	; 0x2a4 <main+0x126>
	{
	c++;
 2a0:	2f 5f       	subi	r18, 0xFF	; 255
 2a2:	3f 4f       	sbci	r19, 0xFF	; 255
	a[i]=key();
	data(a[i]);
	}
	for(i=0;i<4;i++)
	{
	if(a[i]==b[i])
 2a4:	8b 81       	ldd	r24, Y+3	; 0x03
 2a6:	87 15       	cp	r24, r7
 2a8:	11 f4       	brne	.+4      	; 0x2ae <main+0x130>
	{
	c++;
 2aa:	2f 5f       	subi	r18, 0xFF	; 255
 2ac:	3f 4f       	sbci	r19, 0xFF	; 255
	a[i]=key();
	data(a[i]);
	}
	for(i=0;i<4;i++)
	{
	if(a[i]==b[i])
 2ae:	8c 81       	ldd	r24, Y+4	; 0x04
 2b0:	86 15       	cp	r24, r6
 2b2:	11 f4       	brne	.+4      	; 0x2b8 <main+0x13a>
	{
	c++;
 2b4:	2f 5f       	subi	r18, 0xFF	; 255
 2b6:	3f 4f       	sbci	r19, 0xFF	; 255
	}
	}
	if(c==4)
 2b8:	24 30       	cpi	r18, 0x04	; 4
 2ba:	31 05       	cpc	r19, r1
 2bc:	21 f5       	brne	.+72     	; 0x306 <main+0x188>
		}
	}
}
void cmd(int a)
{
	PORTB=a;
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	88 bb       	out	0x18, r24	; 24
	PORTC=0X02;
 2c2:	82 e0       	ldi	r24, 0x02	; 2
 2c4:	85 bb       	out	0x15, r24	; 21
 2c6:	80 e2       	ldi	r24, 0x20	; 32
 2c8:	9e e4       	ldi	r25, 0x4E	; 78
 2ca:	29 e1       	ldi	r18, 0x19	; 25
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	f9 01       	movw	r30, r18
 2d0:	31 97       	sbiw	r30, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <main+0x152>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2d6:	d9 f7       	brne	.-10     	; 0x2ce <main+0x150>
	_delay_ms(2000);
	PORTC=0X00;
 2d8:	15 ba       	out	0x15, r1	; 21
 2da:	a0 e6       	ldi	r26, 0x60	; 96
 2dc:	b0 e0       	ldi	r27, 0x00	; 0
}

void data(char b)
{
	PORTB=b;
	PORTC=0X03;
 2de:	53 e0       	ldi	r21, 0x03	; 3
 2e0:	29 e1       	ldi	r18, 0x19	; 25
 2e2:	30 e0       	ldi	r19, 0x00	; 0
	_delay_ms(2000);
	PORTC=0X01;
 2e4:	41 e0       	ldi	r20, 0x01	; 1
 2e6:	0b c0       	rjmp	.+22     	; 0x2fe <main+0x180>
	PORTC=0X00;
}

void data(char b)
{
	PORTB=b;
 2e8:	88 bb       	out	0x18, r24	; 24
	PORTC=0X03;
 2ea:	55 bb       	out	0x15, r21	; 21
 2ec:	80 e2       	ldi	r24, 0x20	; 32
 2ee:	9e e4       	ldi	r25, 0x4E	; 78
 2f0:	f9 01       	movw	r30, r18
 2f2:	31 97       	sbiw	r30, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <main+0x174>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2f6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2f8:	d9 f7       	brne	.-10     	; 0x2f0 <main+0x172>
	_delay_ms(2000);
	PORTC=0X01;
 2fa:	45 bb       	out	0x15, r20	; 21
void display(const char *p)
{
	while(*p!='\0')
	{
	data(*p);
	p++;
 2fc:	11 96       	adiw	r26, 0x01	; 1
	PORTC=0X01;
}

void display(const char *p)
{
	while(*p!='\0')
 2fe:	8c 91       	ld	r24, X
 300:	88 23       	and	r24, r24
 302:	91 f7       	brne	.-28     	; 0x2e8 <main+0x16a>
 304:	23 c0       	rjmp	.+70     	; 0x34c <main+0x1ce>
		}
	}
}
void cmd(int a)
{
	PORTB=a;
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	88 bb       	out	0x18, r24	; 24
	PORTC=0X02;
 30a:	82 e0       	ldi	r24, 0x02	; 2
 30c:	85 bb       	out	0x15, r24	; 21
 30e:	80 e2       	ldi	r24, 0x20	; 32
 310:	9e e4       	ldi	r25, 0x4E	; 78
 312:	29 e1       	ldi	r18, 0x19	; 25
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	f9 01       	movw	r30, r18
 318:	31 97       	sbiw	r30, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <main+0x19a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 31c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 31e:	d9 f7       	brne	.-10     	; 0x316 <main+0x198>
	_delay_ms(2000);
	PORTC=0X00;
 320:	15 ba       	out	0x15, r1	; 21
 322:	af e6       	ldi	r26, 0x6F	; 111
 324:	b0 e0       	ldi	r27, 0x00	; 0
}

void data(char b)
{
	PORTB=b;
	PORTC=0X03;
 326:	53 e0       	ldi	r21, 0x03	; 3
 328:	29 e1       	ldi	r18, 0x19	; 25
 32a:	30 e0       	ldi	r19, 0x00	; 0
	_delay_ms(2000);
	PORTC=0X01;
 32c:	41 e0       	ldi	r20, 0x01	; 1
 32e:	0b c0       	rjmp	.+22     	; 0x346 <main+0x1c8>
	PORTC=0X00;
}

void data(char b)
{
	PORTB=b;
 330:	88 bb       	out	0x18, r24	; 24
	PORTC=0X03;
 332:	55 bb       	out	0x15, r21	; 21
 334:	80 e2       	ldi	r24, 0x20	; 32
 336:	9e e4       	ldi	r25, 0x4E	; 78
 338:	f9 01       	movw	r30, r18
 33a:	31 97       	sbiw	r30, 0x01	; 1
 33c:	f1 f7       	brne	.-4      	; 0x33a <main+0x1bc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 33e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 340:	d9 f7       	brne	.-10     	; 0x338 <main+0x1ba>
	_delay_ms(2000);
	PORTC=0X01;
 342:	45 bb       	out	0x15, r20	; 21
void display(const char *p)
{
	while(*p!='\0')
	{
	data(*p);
	p++;
 344:	11 96       	adiw	r26, 0x01	; 1
	PORTC=0X01;
}

void display(const char *p)
{
	while(*p!='\0')
 346:	8c 91       	ld	r24, X
 348:	88 23       	and	r24, r24
 34a:	91 f7       	brne	.-28     	; 0x330 <main+0x1b2>
	{
	cmd(0X01);
	display("wrong");
	}
	
}
 34c:	0f 90       	pop	r0
 34e:	0f 90       	pop	r0
 350:	0f 90       	pop	r0
 352:	0f 90       	pop	r0
 354:	cf 91       	pop	r28
 356:	df 91       	pop	r29
 358:	1f 91       	pop	r17
 35a:	0f 91       	pop	r16
 35c:	ff 90       	pop	r15
 35e:	ef 90       	pop	r14
 360:	df 90       	pop	r13
 362:	cf 90       	pop	r12
 364:	bf 90       	pop	r11
 366:	af 90       	pop	r10
 368:	9f 90       	pop	r9
 36a:	8f 90       	pop	r8
 36c:	7f 90       	pop	r7
 36e:	6f 90       	pop	r6
 370:	08 95       	ret

00000372 <cmd>:
			break;
		}
	}
}
void cmd(int a)
{
 372:	88 bb       	out	0x18, r24	; 24
	PORTB=a;
	PORTC=0X02;
 374:	82 e0       	ldi	r24, 0x02	; 2
 376:	85 bb       	out	0x15, r24	; 21
 378:	80 e2       	ldi	r24, 0x20	; 32
 37a:	9e e4       	ldi	r25, 0x4E	; 78
 37c:	29 e1       	ldi	r18, 0x19	; 25
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	f9 01       	movw	r30, r18
 382:	31 97       	sbiw	r30, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <cmd+0x10>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 386:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 388:	d9 f7       	brne	.-10     	; 0x380 <cmd+0xe>
	_delay_ms(2000);
	PORTC=0X00;
 38a:	15 ba       	out	0x15, r1	; 21
}
 38c:	08 95       	ret

0000038e <data>:

void data(char b)
{
 38e:	88 bb       	out	0x18, r24	; 24
	PORTB=b;
	PORTC=0X03;
 390:	83 e0       	ldi	r24, 0x03	; 3
 392:	85 bb       	out	0x15, r24	; 21
 394:	80 e2       	ldi	r24, 0x20	; 32
 396:	9e e4       	ldi	r25, 0x4E	; 78
 398:	29 e1       	ldi	r18, 0x19	; 25
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	f9 01       	movw	r30, r18
 39e:	31 97       	sbiw	r30, 0x01	; 1
 3a0:	f1 f7       	brne	.-4      	; 0x39e <data+0x10>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3a2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3a4:	d9 f7       	brne	.-10     	; 0x39c <data+0xe>
	_delay_ms(2000);
	PORTC=0X01;
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	85 bb       	out	0x15, r24	; 21
}
 3aa:	08 95       	ret

000003ac <display>:

void display(const char *p)
{
 3ac:	dc 01       	movw	r26, r24
}

void data(char b)
{
	PORTB=b;
	PORTC=0X03;
 3ae:	53 e0       	ldi	r21, 0x03	; 3
 3b0:	29 e1       	ldi	r18, 0x19	; 25
 3b2:	30 e0       	ldi	r19, 0x00	; 0
	_delay_ms(2000);
	PORTC=0X01;
 3b4:	41 e0       	ldi	r20, 0x01	; 1
 3b6:	0b c0       	rjmp	.+22     	; 0x3ce <display+0x22>
	PORTC=0X00;
}

void data(char b)
{
	PORTB=b;
 3b8:	88 bb       	out	0x18, r24	; 24
	PORTC=0X03;
 3ba:	55 bb       	out	0x15, r21	; 21
 3bc:	80 e2       	ldi	r24, 0x20	; 32
 3be:	9e e4       	ldi	r25, 0x4E	; 78
 3c0:	f9 01       	movw	r30, r18
 3c2:	31 97       	sbiw	r30, 0x01	; 1
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <display+0x16>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3c6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3c8:	d9 f7       	brne	.-10     	; 0x3c0 <display+0x14>
	_delay_ms(2000);
	PORTC=0X01;
 3ca:	45 bb       	out	0x15, r20	; 21
void display(const char *p)
{
	while(*p!='\0')
	{
	data(*p);
	p++;
 3cc:	11 96       	adiw	r26, 0x01	; 1
	PORTC=0X01;
}

void display(const char *p)
{
	while(*p!='\0')
 3ce:	8c 91       	ld	r24, X
 3d0:	88 23       	and	r24, r24
 3d2:	91 f7       	brne	.-28     	; 0x3b8 <display+0xc>
	{
	data(*p);
	p++;
	}
}
 3d4:	08 95       	ret

000003d6 <_exit>:
 3d6:	f8 94       	cli

000003d8 <__stop_program>:
 3d8:	ff cf       	rjmp	.-2      	; 0x3d8 <__stop_program>
