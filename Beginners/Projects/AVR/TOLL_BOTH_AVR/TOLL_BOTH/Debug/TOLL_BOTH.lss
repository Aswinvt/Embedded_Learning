
TOLL_BOTH.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000030e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00800060  0000030e  00000382  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009cc  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ab  00000000  00000000  00000e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004c3  00000000  00000000  000014ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  000019c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000367  00000000  00000000  00001a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003b7  00000000  00000000  00001deb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000021a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e0       	ldi	r30, 0x0E	; 14
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 3a       	cpi	r26, 0xAA	; 170
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 48 01 	call	0x290	; 0x290 <main>
  7a:	0c 94 85 01 	jmp	0x30a	; 0x30a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <cmd>:
	}
}

void cmd(int a)
{
	PORTC=a;
  82:	85 bb       	out	0x15, r24	; 21
	PORTB=0X02;
  84:	82 e0       	ldi	r24, 0x02	; 2
  86:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	2f e3       	ldi	r18, 0x3F	; 63
  8a:	82 e4       	ldi	r24, 0x42	; 66
  8c:	9f e0       	ldi	r25, 0x0F	; 15
  8e:	21 50       	subi	r18, 0x01	; 1
  90:	80 40       	sbci	r24, 0x00	; 0
  92:	90 40       	sbci	r25, 0x00	; 0
  94:	e1 f7       	brne	.-8      	; 0x8e <cmd+0xc>
  96:	00 c0       	rjmp	.+0      	; 0x98 <cmd+0x16>
  98:	00 00       	nop
	_delay_ms(5000);
	PORTB=0X00;
  9a:	18 ba       	out	0x18, r1	; 24
  9c:	08 95       	ret

0000009e <data>:
}

void data(char b)
{
	PORTC=b;
  9e:	85 bb       	out	0x15, r24	; 21
	PORTB=0X03;
  a0:	83 e0       	ldi	r24, 0x03	; 3
  a2:	88 bb       	out	0x18, r24	; 24
  a4:	2f e3       	ldi	r18, 0x3F	; 63
  a6:	82 e4       	ldi	r24, 0x42	; 66
  a8:	9f e0       	ldi	r25, 0x0F	; 15
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	80 40       	sbci	r24, 0x00	; 0
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <data+0xc>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <data+0x16>
  b4:	00 00       	nop
	_delay_ms(5000);
	PORTB=0X01;
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	88 bb       	out	0x18, r24	; 24
  ba:	08 95       	ret

000000bc <display>:
}

void display(const char *p)
{
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	ec 01       	movw	r28, r24
	while(*p!='\0')
  c2:	88 81       	ld	r24, Y
  c4:	88 23       	and	r24, r24
  c6:	31 f0       	breq	.+12     	; 0xd4 <display+0x18>
  c8:	21 96       	adiw	r28, 0x01	; 1
	{
		data(*p);
  ca:	0e 94 4f 00 	call	0x9e	; 0x9e <data>
	PORTB=0X01;
}

void display(const char *p)
{
	while(*p!='\0')
  ce:	89 91       	ld	r24, Y+
  d0:	81 11       	cpse	r24, r1
  d2:	fb cf       	rjmp	.-10     	; 0xca <display+0xe>
	{
		data(*p);
		p++;
	}
}
  d4:	df 91       	pop	r29
  d6:	cf 91       	pop	r28
  d8:	08 95       	ret

000000da <key>:
char key()
{
	int e;
	while(1)
	{
		PORTD=0X7F;
  da:	9f e7       	ldi	r25, 0x7F	; 127
			break;
			case 0X0E:
			return('4');
			break;
		}
		PORTD=0XBF;
  dc:	2f eb       	ldi	r18, 0xBF	; 191
			break;
			case 0X0E:
			return('8');
			break;
		}
		PORTD=0XDF;
  de:	3f ed       	ldi	r19, 0xDF	; 223
			break;
			case 0X0E:
			return('0');
			break;
		}
		PORTD=0XEF;
  e0:	4f ee       	ldi	r20, 0xEF	; 239
char key()
{
	int e;
	while(1)
	{
		PORTD=0X7F;
  e2:	92 bb       	out	0x12, r25	; 18
		e=PIND&0X0F;
  e4:	80 b3       	in	r24, 0x10	; 16
		switch(e)
  e6:	8f 70       	andi	r24, 0x0F	; 15
  e8:	8b 30       	cpi	r24, 0x0B	; 11
  ea:	51 f0       	breq	.+20     	; 0x100 <key+0x26>
  ec:	20 f4       	brcc	.+8      	; 0xf6 <key+0x1c>
  ee:	87 30       	cpi	r24, 0x07	; 7
  f0:	09 f4       	brne	.+2      	; 0xf4 <key+0x1a>
  f2:	48 c0       	rjmp	.+144    	; 0x184 <key+0xaa>
  f4:	0b c0       	rjmp	.+22     	; 0x10c <key+0x32>
  f6:	8d 30       	cpi	r24, 0x0D	; 13
  f8:	29 f0       	breq	.+10     	; 0x104 <key+0x2a>
  fa:	8e 30       	cpi	r24, 0x0E	; 14
  fc:	29 f0       	breq	.+10     	; 0x108 <key+0x2e>
  fe:	06 c0       	rjmp	.+12     	; 0x10c <key+0x32>
		{
			case 0X07:
			return('1');
			break;
			case 0X0B:
			return('2');
 100:	82 e3       	ldi	r24, 0x32	; 50
 102:	08 95       	ret
			break;
			case 0X0D:
			return('3');
 104:	83 e3       	ldi	r24, 0x33	; 51
 106:	08 95       	ret
			break;
			case 0X0E:
			return('4');
 108:	84 e3       	ldi	r24, 0x34	; 52
 10a:	08 95       	ret
			break;
		}
		PORTD=0XBF;
 10c:	22 bb       	out	0x12, r18	; 18
		e=PIND&0X0F;
 10e:	80 b3       	in	r24, 0x10	; 16
		switch(e)
 110:	8f 70       	andi	r24, 0x0F	; 15
 112:	8b 30       	cpi	r24, 0x0B	; 11
 114:	49 f0       	breq	.+18     	; 0x128 <key+0x4e>
 116:	18 f4       	brcc	.+6      	; 0x11e <key+0x44>
 118:	87 30       	cpi	r24, 0x07	; 7
 11a:	b1 f1       	breq	.+108    	; 0x188 <key+0xae>
 11c:	0b c0       	rjmp	.+22     	; 0x134 <key+0x5a>
 11e:	8d 30       	cpi	r24, 0x0D	; 13
 120:	29 f0       	breq	.+10     	; 0x12c <key+0x52>
 122:	8e 30       	cpi	r24, 0x0E	; 14
 124:	29 f0       	breq	.+10     	; 0x130 <key+0x56>
 126:	06 c0       	rjmp	.+12     	; 0x134 <key+0x5a>
		{
			case 0X07:
			return('5');
			break;
			case 0X0B:
			return('6');
 128:	86 e3       	ldi	r24, 0x36	; 54
 12a:	08 95       	ret
			break;
			case 0X0D:
			return('7');
 12c:	87 e3       	ldi	r24, 0x37	; 55
 12e:	08 95       	ret
			break;
			case 0X0E:
			return('8');
 130:	88 e3       	ldi	r24, 0x38	; 56
 132:	08 95       	ret
			break;
		}
		PORTD=0XDF;
 134:	32 bb       	out	0x12, r19	; 18
		e=PIND&0X0F;
 136:	80 b3       	in	r24, 0x10	; 16
		switch(e)
 138:	8f 70       	andi	r24, 0x0F	; 15
 13a:	8b 30       	cpi	r24, 0x0B	; 11
 13c:	49 f0       	breq	.+18     	; 0x150 <key+0x76>
 13e:	18 f4       	brcc	.+6      	; 0x146 <key+0x6c>
 140:	87 30       	cpi	r24, 0x07	; 7
 142:	21 f1       	breq	.+72     	; 0x18c <key+0xb2>
 144:	0b c0       	rjmp	.+22     	; 0x15c <key+0x82>
 146:	8d 30       	cpi	r24, 0x0D	; 13
 148:	29 f0       	breq	.+10     	; 0x154 <key+0x7a>
 14a:	8e 30       	cpi	r24, 0x0E	; 14
 14c:	29 f0       	breq	.+10     	; 0x158 <key+0x7e>
 14e:	06 c0       	rjmp	.+12     	; 0x15c <key+0x82>
		{
			case 0X07:
			return('9');
			break;
			case 0X0B:
			return('*');
 150:	8a e2       	ldi	r24, 0x2A	; 42
 152:	08 95       	ret
			break;
			case 0X0D:
			return('#');
 154:	83 e2       	ldi	r24, 0x23	; 35
 156:	08 95       	ret
			break;
			case 0X0E:
			return('0');
 158:	80 e3       	ldi	r24, 0x30	; 48
 15a:	08 95       	ret
			break;
		}
		PORTD=0XEF;
 15c:	42 bb       	out	0x12, r20	; 18
		e=PIND&0X0F;
 15e:	80 b3       	in	r24, 0x10	; 16
		switch(e)
 160:	8f 70       	andi	r24, 0x0F	; 15
 162:	8b 30       	cpi	r24, 0x0B	; 11
 164:	49 f0       	breq	.+18     	; 0x178 <key+0x9e>
 166:	18 f4       	brcc	.+6      	; 0x16e <key+0x94>
 168:	87 30       	cpi	r24, 0x07	; 7
 16a:	91 f0       	breq	.+36     	; 0x190 <key+0xb6>
 16c:	ba cf       	rjmp	.-140    	; 0xe2 <key+0x8>
 16e:	8d 30       	cpi	r24, 0x0D	; 13
 170:	29 f0       	breq	.+10     	; 0x17c <key+0xa2>
 172:	8e 30       	cpi	r24, 0x0E	; 14
 174:	29 f0       	breq	.+10     	; 0x180 <key+0xa6>
 176:	b5 cf       	rjmp	.-150    	; 0xe2 <key+0x8>
		{
			case 0X07:
			return('H');
			break;
			case 0X0B:
			return('A');
 178:	81 e4       	ldi	r24, 0x41	; 65
 17a:	08 95       	ret
			break;
			case 0X0D:
			return('R');
 17c:	82 e5       	ldi	r24, 0x52	; 82
 17e:	08 95       	ret
			break;
			case 0X0E:
			return('O');
 180:	8f e4       	ldi	r24, 0x4F	; 79
 182:	08 95       	ret
		PORTD=0X7F;
		e=PIND&0X0F;
		switch(e)
		{
			case 0X07:
			return('1');
 184:	81 e3       	ldi	r24, 0x31	; 49
 186:	08 95       	ret
		PORTD=0XBF;
		e=PIND&0X0F;
		switch(e)
		{
			case 0X07:
			return('5');
 188:	85 e3       	ldi	r24, 0x35	; 53
 18a:	08 95       	ret
		PORTD=0XDF;
		e=PIND&0X0F;
		switch(e)
		{
			case 0X07:
			return('9');
 18c:	89 e3       	ldi	r24, 0x39	; 57
 18e:	08 95       	ret
		PORTD=0XEF;
		e=PIND&0X0F;
		switch(e)
		{
			case 0X07:
			return('H');
 190:	88 e4       	ldi	r24, 0x48	; 72
			case 0X0E:
			return('O');
			break;
		}
	}
}
 192:	08 95       	ret

00000194 <password>:
		p++;
	}
}

int password()
{
 194:	cf 92       	push	r12
 196:	df 92       	push	r13
 198:	ef 92       	push	r14
 19a:	ff 92       	push	r15
 19c:	0f 93       	push	r16
 19e:	1f 93       	push	r17
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	cd b7       	in	r28, 0x3d	; 61
 1a6:	de b7       	in	r29, 0x3e	; 62
 1a8:	28 97       	sbiw	r28, 0x08	; 8
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	f8 94       	cli
 1ae:	de bf       	out	0x3e, r29	; 62
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	cd bf       	out	0x3d, r28	; 61
	char a[4],b[4]="1234";
 1b4:	81 e3       	ldi	r24, 0x31	; 49
 1b6:	92 e3       	ldi	r25, 0x32	; 50
 1b8:	9e 83       	std	Y+6, r25	; 0x06
 1ba:	8d 83       	std	Y+5, r24	; 0x05
 1bc:	83 e3       	ldi	r24, 0x33	; 51
 1be:	94 e3       	ldi	r25, 0x34	; 52
 1c0:	98 87       	std	Y+8, r25	; 0x08
 1c2:	8f 83       	std	Y+7, r24	; 0x07
	int c=0,i;
	cmd(0X01);
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 41 00 	call	0x82	; 0x82 <cmd>
	display("ENTER THE PASSWORD");
 1cc:	80 e6       	ldi	r24, 0x60	; 96
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 5e 00 	call	0xbc	; 0xbc <display>
 1d4:	2f eb       	ldi	r18, 0xBF	; 191
 1d6:	37 e2       	ldi	r19, 0x27	; 39
 1d8:	89 e0       	ldi	r24, 0x09	; 9
 1da:	21 50       	subi	r18, 0x01	; 1
 1dc:	30 40       	sbci	r19, 0x00	; 0
 1de:	80 40       	sbci	r24, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <password+0x46>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <password+0x50>
 1e4:	00 00       	nop
	_delay_ms(3000);
	cmd(0X01);
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 41 00 	call	0x82	; 0x82 <cmd>
 1ee:	8e 01       	movw	r16, r28
 1f0:	0f 5f       	subi	r16, 0xFF	; 255
 1f2:	1f 4f       	sbci	r17, 0xFF	; 255
 1f4:	6e 01       	movw	r12, r28
 1f6:	95 e0       	ldi	r25, 0x05	; 5
 1f8:	c9 0e       	add	r12, r25
 1fa:	d1 1c       	adc	r13, r1
 1fc:	78 01       	movw	r14, r16
	for(i=0;i<4;i++)
	{
		a[i]=key();
 1fe:	0e 94 6d 00 	call	0xda	; 0xda <key>
 202:	d7 01       	movw	r26, r14
 204:	8d 93       	st	X+, r24
 206:	7d 01       	movw	r14, r26
 208:	bf e3       	ldi	r27, 0x3F	; 63
 20a:	ed e0       	ldi	r30, 0x0D	; 13
 20c:	f3 e0       	ldi	r31, 0x03	; 3
 20e:	b1 50       	subi	r27, 0x01	; 1
 210:	e0 40       	sbci	r30, 0x00	; 0
 212:	f0 40       	sbci	r31, 0x00	; 0
 214:	e1 f7       	brne	.-8      	; 0x20e <password+0x7a>
 216:	00 c0       	rjmp	.+0      	; 0x218 <password+0x84>
 218:	00 00       	nop
		_delay_ms(1000);
		data(a[i]);
 21a:	0e 94 4f 00 	call	0x9e	; 0x9e <data>
	int c=0,i;
	cmd(0X01);
	display("ENTER THE PASSWORD");
	_delay_ms(3000);
	cmd(0X01);
	for(i=0;i<4;i++)
 21e:	ec 14       	cp	r14, r12
 220:	fd 04       	cpc	r15, r13
 222:	69 f7       	brne	.-38     	; 0x1fe <password+0x6a>
 224:	fe 01       	movw	r30, r28
 226:	35 96       	adiw	r30, 0x05	; 5
 228:	20 e0       	ldi	r18, 0x00	; 0
 22a:	30 e0       	ldi	r19, 0x00	; 0
		_delay_ms(1000);
		data(a[i]);
	}
	for(i=0;i<4;i++)
	{
		if(a[i]==b[i])
 22c:	d8 01       	movw	r26, r16
 22e:	9d 91       	ld	r25, X+
 230:	8d 01       	movw	r16, r26
 232:	81 91       	ld	r24, Z+
 234:	98 13       	cpse	r25, r24
 236:	02 c0       	rjmp	.+4      	; 0x23c <password+0xa8>
		{
			c++;
 238:	2f 5f       	subi	r18, 0xFF	; 255
 23a:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		a[i]=key();
		_delay_ms(1000);
		data(a[i]);
	}
	for(i=0;i<4;i++)
 23c:	0c 15       	cp	r16, r12
 23e:	1d 05       	cpc	r17, r13
 240:	a9 f7       	brne	.-22     	; 0x22c <password+0x98>
		if(a[i]==b[i])
		{
			c++;
		}
	}
	if(c==4)
 242:	24 30       	cpi	r18, 0x04	; 4
 244:	31 05       	cpc	r19, r1
 246:	59 f4       	brne	.+22     	; 0x25e <password+0xca>
	{
		cmd(0X01);
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 41 00 	call	0x82	; 0x82 <cmd>
		display("ACCESS GRANTED");
 250:	83 e7       	ldi	r24, 0x73	; 115
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 5e 00 	call	0xbc	; 0xbc <display>
		return 1;
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0a c0       	rjmp	.+20     	; 0x272 <password+0xde>
	}
	else
	{
		cmd(0X01);
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 41 00 	call	0x82	; 0x82 <cmd>
		display("ACCESS DENIED");
 266:	82 e8       	ldi	r24, 0x82	; 130
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 5e 00 	call	0xbc	; 0xbc <display>
		return 0;
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 272:	28 96       	adiw	r28, 0x08	; 8
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	f8 94       	cli
 278:	de bf       	out	0x3e, r29	; 62
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	cd bf       	out	0x3d, r28	; 61
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	1f 91       	pop	r17
 284:	0f 91       	pop	r16
 286:	ff 90       	pop	r15
 288:	ef 90       	pop	r14
 28a:	df 90       	pop	r13
 28c:	cf 90       	pop	r12
 28e:	08 95       	ret

00000290 <main>:
void motor();

int main()
{
	int p;
	DDRA=0X00;
 290:	1a ba       	out	0x1a, r1	; 26
    DDRB=0XFF;
 292:	8f ef       	ldi	r24, 0xFF	; 255
 294:	87 bb       	out	0x17, r24	; 23
	DDRC=0XFF;
 296:	84 bb       	out	0x14, r24	; 20
	DDRD=0XF0;
 298:	80 ef       	ldi	r24, 0xF0	; 240
 29a:	81 bb       	out	0x11, r24	; 17
	cmd(0X38);
 29c:	88 e3       	ldi	r24, 0x38	; 56
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	0e 94 41 00 	call	0x82	; 0x82 <cmd>
	cmd(0X80);
 2a4:	80 e8       	ldi	r24, 0x80	; 128
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 41 00 	call	0x82	; 0x82 <cmd>
	cmd(0X06);
 2ac:	86 e0       	ldi	r24, 0x06	; 6
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 41 00 	call	0x82	; 0x82 <cmd>
	cmd(0X0E);
 2b4:	8e e0       	ldi	r24, 0x0E	; 14
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 41 00 	call	0x82	; 0x82 <cmd>
	h:cmd(0X01);
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	0e 94 41 00 	call	0x82	; 0x82 <cmd>
	display("WELCOME");
 2c4:	80 e9       	ldi	r24, 0x90	; 144
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 5e 00 	call	0xbc	; 0xbc <display>
 2cc:	2f e3       	ldi	r18, 0x3F	; 63
 2ce:	82 e4       	ldi	r24, 0x42	; 66
 2d0:	9f e0       	ldi	r25, 0x0F	; 15
 2d2:	21 50       	subi	r18, 0x01	; 1
 2d4:	80 40       	sbci	r24, 0x00	; 0
 2d6:	90 40       	sbci	r25, 0x00	; 0
 2d8:	e1 f7       	brne	.-8      	; 0x2d2 <main+0x42>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <main+0x4c>
 2dc:	00 00       	nop
	_delay_ms(5000);
	cmd(0X01);
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 94 41 00 	call	0x82	; 0x82 <cmd>
	display("PRESS THE BUTTON");
 2e6:	88 e9       	ldi	r24, 0x98	; 152
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 5e 00 	call	0xbc	; 0xbc <display>
	while((PINA&0X01)!=1);
 2ee:	c8 9b       	sbis	0x19, 0	; 25
 2f0:	fe cf       	rjmp	.-4      	; 0x2ee <main+0x5e>
	if((PINA&0X01)==1)
 2f2:	c8 9b       	sbis	0x19, 0	; 25
 2f4:	07 c0       	rjmp	.+14     	; 0x304 <main+0x74>
	{
		p=password();
 2f6:	0e 94 ca 00 	call	0x194	; 0x194 <password>
		if(p==1)
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	f9 f6       	brne	.-66     	; 0x2bc <main+0x2c>

void motor()
{
	while(1)
	{
		PORTB=0X50;
 2fe:	80 e5       	ldi	r24, 0x50	; 80
 300:	88 bb       	out	0x18, r24	; 24
 302:	fe cf       	rjmp	.-4      	; 0x300 <main+0x70>
		else
		{
			goto h;
		}
	}
}
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	08 95       	ret

0000030a <_exit>:
 30a:	f8 94       	cli

0000030c <__stop_program>:
 30c:	ff cf       	rjmp	.-2      	; 0x30c <__stop_program>
